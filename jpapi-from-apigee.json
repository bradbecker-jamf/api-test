{
  "swagger": "2.0",
  "info": {
    "description": "## Overview\nThis is a sample Jamf Pro server which allows for usage without any authentication. The Jamf Pro environment which supports the Try it Out functionality does not run the current beta version of Jamf Pro, thus any newly added endpoints will result in an error and should be used soley for documentation purposes.\n",
    "version": "1.0",
    "title": "Jamf Pro API"
  },
  "basePath": "/uapi",
  "host": "tryitout.jamfcloud.com",
  "tags": [
    {
      "name": "advanced-mobile-device-searches"
    },
    {
      "name": "api-authentication"
    },
    {
      "name": "buildings"
    },
    {
      "name": "cache-settings"
    },
    {
      "name": "categories"
    },
    {
      "name": "client-check-in"
    },
    {
      "name": "departments"
    },
    {
      "name": "device-enrollment"
    },
    {
      "name": "ebooks"
    },
    {
      "name": "engage"
    },
    {
      "name": "enrollment"
    },
    {
      "name": "inventory-preload"
    },
    {
      "name": "jamf-pro-information"
    },
    {
      "name": "jamf-pro-initialization"
    },
    {
      "name": "jamf-pro-notifications"
    },
    {
      "name": "jamf-pro-server-url"
    },
    {
      "name": "jamf-pro-user-account-settings"
    },
    {
      "name": "ldap-groups"
    },
    {
      "name": "ldap-servers"
    },
    {
      "name": "lobby"
    },
    {
      "name": "mobile-device-extension-attributes"
    },
    {
      "name": "mobile-devices"
    },
    {
      "name": "patch-policies"
    },
    {
      "name": "patch-policy-logs"
    },
    {
      "name": "patches"
    },
    {
      "name": "policies"
    },
    {
      "name": "re-enrollment"
    },
    {
      "name": "scripts"
    },
    {
      "name": "self-service"
    },
    {
      "name": "self-service-branding"
    },
    {
      "name": "sites"
    },
    {
      "name": "smart-computer-groups"
    },
    {
      "name": "smart-mobile-device-groups"
    },
    {
      "name": "sso-certificate"
    },
    {
      "name": "sso-settings"
    },
    {
      "name": "startup-status"
    },
    {
      "name": "tomcat-settings"
    },
    {
      "name": "user-session"
    },
    {
      "name": "vpp-admin-accounts"
    },
    {
      "name": "vpp-subscriptions"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "lobby"
        ],
        "description": "Returns information about the Jamf Pro API including the current version.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Lobby"
            }
          }
        },
        "x-authentication-required": true
      },
      "parameters": []
    },
    "/action/device-enrollment/upload-token": {
      "post": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Creates a device enrollment instance with the supplied token.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.",
            "required": true,
            "schema": {
              "properties": {
                "tokenFileName": {
                  "type": "string",
                  "example": "Acme MDM Token",
                  "description": "Optional name of the token to be saved, if no name is provided one will be auto-generated"
                },
                "encodedToken": {
                  "type": "array",
                  "description": "The base 64 encoded token",
                  "items": {
                    "type": "string",
                    "format": "byte",
                    "example": "U29tZSByYW5kb20gYml0IG9mIHRleHQgdG8gdXNlIGFuZCBzZWUgaWYgYW55b25lIGFjdHVhbGx5IHRyaWVzIHRvIGRlY29kZSBpdA=="
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Example Device Enrollment Instance"
                },
                "supervisionIdentityId": {
                  "type": "integer",
                  "example": 1
                },
                "siteId": {
                  "type": "integer",
                  "example": -1
                },
                "serverName": {
                  "type": "string",
                  "example": "Acme ASM"
                },
                "serverUuid": {
                  "type": "string",
                  "example": "BASD08C11F3C455"
                },
                "adminId": {
                  "type": "string",
                  "example": "admin1234"
                },
                "orgName": {
                  "type": "string",
                  "example": "Acme Enterprises"
                },
                "orgEmail": {
                  "type": "string",
                  "example": "admin@test.com"
                },
                "orgPhone": {
                  "type": "string",
                  "example": "555-0123"
                },
                "orgAddress": {
                  "type": "string",
                  "example": "124 Conch Street, Bikini Bottom, Pacific Ocean"
                },
                "tokenExpirationDate": {
                  "type": "string",
                  "example": "10/10/2000"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong"
          }
        },
        "x-required-privileges": [
          "Create Device Enrollment Program Instances"
        ]
      },
    },
    "/action/device-enrollment/{id}/disown": {
      "post": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Disowns devices from the given device enrollment instance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of device enrollment",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "List of device serial numbers to disown",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "devices": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Could not find device enrollment program instance for given id"
          },
          "500": {
            "description": "Something went wrong."
          }
        },
        "x-required-privileges": [
          "Update Device Enrollment Program Instances"
        ],
        "x-action": true
      },
      "parameters": []
    },
    "/action/device-enrollment/{id}/upload-token": {
      "put": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Updates a device enrollment instance with the supplied token.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceEnrollmentToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceEnrollmentInstance"
            }
          },
          "404": {
            "description": "Device Enrollment Instance with that id does not exist"
          },
          "500": {
            "description": "Something went wrong"
          }
        },
        "x-required-privileges": [
          "Update Device Enrollment Program Instances"
        ]
      },
      "parameters": []
    },
    "/auth": {
      "get": {
        "tags": [
          "api-authentication"
        ],
        "description": "Get all the authorization details associated with the current api token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current authorization details.",
            "schema": {
              "$ref": "#/definitions/Authorization"
            }
          }
        },
        "x-authentication-required": true
      },
      "parameters": []
    },
    "/auth/current": {
      "post": {
        "tags": [
          "api-authentication"
        ],
        "description": "Get the authorization details associated with the current api token for the users current site",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Authorization details for users current site.",
            "schema": {
              "$ref": "#/definitions/CurrentAuthorization"
            }
          }
        },
        "x-authentication-required": true,
        "x-action": true
      },
      "parameters": []
    },
    "/auth/invalidateToken": {
      "post": {
        "tags": [
          "api-authentication"
        ],
        "description": "Invalidates current token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "token invalidated"
          }
        },
        "x-authentication-required": true,
        "x-action": true
      },
      "parameters": []
    },
    "/auth/keepAlive": {
      "post": {
        "tags": [
          "api-authentication"
        ],
        "description": "Invalidates existing token and generates new token with extended expiration based on existing token credentials.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Updated token.",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        },
        "x-authentication-required": true,
        "x-action": true
      },
      "parameters": []
    },
    "/auth/tokens": {
      "post": {
        "tags": [
          "api-authentication"
        ],
        "description": "Create a token based on other authentication details (basic, etc.)\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "New auth token generated.",
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        },
        "x-authentication-required": false,
        "x-action": true
      },
      "parameters": []
    },
    "/computer/obj/computer/{id}/recalculateSmartGroups": {
      "post": {
        "tags": [
          "smart-computer-groups"
        ],
        "description": "Recalculates a smart group for the given id and then\nreturns the count of smart groups the computer falls into\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of computer",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/RecalculationResults"
            }
          },
          "400": {
            "description": "smart group not found"
          }
        },
        "x-required-privileges": [
          "Update Smart Computer Groups"
        ]
      },
      "parameters": []
    },
    "/computer/obj/smartgroup/{id}/recalculate": {
      "post": {
        "tags": [
          "smart-computer-groups"
        ],
        "description": "Recalculates the smart group for the given id and then\nreturns the ids for the computers in the smart group\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of smart group",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/RecalculationResults"
            }
          },
          "400": {
            "description": "smart group not found"
          }
        },
        "x-required-privileges": [
          "Update Smart Computer Groups"
        ]
      },
      "parameters": []
    },
    "/deployable/obj/ebook": {
      "get": {
        "tags": [
          "ebooks"
        ],
        "description": "Gets ebook object",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ArrayOfEbookObjs",
              "items": {
                "$ref": "#/definitions/ebook"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read eBooks"
        ]
      },
      "parameters": []
    },
    "/deployable/obj/ebook/{id}": {
      "get": {
        "tags": [
          "ebooks"
        ],
        "description": "Gets specified Ebook object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of ebook record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details about ebook were found for given id",
            "schema": {
              "$ref": "#/definitions/ebook"
            }
          },
          "404": {
            "description": "Specified ebook object does not exist."
          }
        },
        "x-required-privileges": [
          "Read eBooks"
        ]
      },
      "parameters": []
    },
    "/deployable/obj/ebook/{id}/scope": {
      "get": {
        "tags": [
          "ebooks"
        ],
        "description": "Gets specified scope of Ebook object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of ebook record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of scope for ebook were found",
            "schema": {
              "$ref": "#/definitions/scope"
            }
          },
          "404": {
            "description": "Specified scope for ebook object does not exist."
          }
        },
        "x-required-privileges": [
          "Read eBooks"
        ]
      },
      "parameters": []
    },
    "/device-enrollment": {
      "get": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Search for sorted and paged device enrollment instances",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ArrayOfInstances",
              "items": {
                "$ref": "#/definitions/DeviceEnrollmentInstance"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Device Enrollment Program Instances"
        ]
      },
      "parameters": []
    },
    "/device-enrollment/public-key": {
      "get": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Retrieve the Jamf Pro device enrollment public key",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-required-privileges": [
          "Read Device Enrollment Program Instances"
        ]
      },
      "parameters": []
    },
    "/device-enrollment/{id}": {
      "get": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Retrieves a Device Enrollment Instance with the supplied id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceEnrollmentInstance"
            }
          },
          "404": {
            "description": "Device Enrollment Instance with that id does not exist"
          }
        },
        "x-required-privileges": [
          "Read Device Enrollment Program Instances"
        ]
      },
      "put": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Updates a Device Enrollment Instance with the supplied id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Acme Device Enrollment Instance"
                },
                "supervisionIdentityId": {
                  "type": "integer",
                  "example": 1
                },
                "siteId": {
                  "type": "integer",
                  "example": -1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceEnrollmentInstance"
            }
          },
          "404": {
            "description": "Device Enrollment Instance with that id does not exist"
          }
        },
        "x-required-privileges": [
          "Update Device Enrollment Program Instances"
        ]
      },
      "delete": {
        "tags": [
          "device-enrollment"
        ],
        "description": "Deletes a Device Enrollment Instance with the supplied id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Device Enrollment Instance with that id does not exist"
          }
        },
        "x-required-privileges": [
          "Delete Device Enrollment Program Instances"
        ]
      },
      "parameters": []
    },
    "/devices/advancedSearches": {
      "get": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Gets Advanced Search Objects\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response - Advanced searches retrieved",
            "schema": {
              "type": "array",
              "title": "ArrayOfAdvancedSearchObjs",
              "items": {
                "$ref": "#/definitions/AdvancedSearch"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Advanced Mobile Device Searches"
        ]
      },
      "post": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Creates Advanced Search Object\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Advanced search created",
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          }
        },
        "x-required-privileges": [
          "Create Advanced Mobile Device Searches"
        ]
      },
      "parameters": []
    },
    "/devices/advancedSearches/choices": {
      "get": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Gets Mobile Device Advanced Search criteria choices\n",
        "parameters": [
          {
            "name": "criteria",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "site",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "contains",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Criteria choices retrieved",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "x-required-privileges": [
          "Read Advanced Mobile Device Searches"
        ]
      },
      "parameters": []
    },
    "/devices/advancedSearches/deleteSearches": {
      "post": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Removes specified Advanced Search Objects\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "IDs of the Advanced Searches to delete",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Advanced searches deleted",
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          },
          "404": {
            "description": "At least one target Advanced Search does not exist"
          }
        },
        "x-required-privileges": [
          "Delete Advanced Mobile Device Searches"
        ]
      },
      "parameters": []
    },
    "/devices/advancedSearches/{id}": {
      "get": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Gets Specified Advanced Search Object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of target Advanced Search",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Advanced Search retrieved",
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          },
          "404": {
            "description": "Target Advanced Search does not exist"
          }
        },
        "x-required-privileges": [
          "Read Advanced Mobile Device Searches"
        ]
      },
      "put": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Gets Specified Advanced Search Object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of target Advanced Search",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Advanced Search retrieved",
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          },
          "404": {
            "description": "Target Advanced Search does not exist"
          }
        },
        "x-required-privileges": [
          "Update Advanced Mobile Device Searches"
        ]
      },
      "delete": {
        "tags": [
          "advanced-mobile-device-searches"
        ],
        "description": "Removes specified Advanced Search Object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance ID of advanced search record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Advanced search deleted",
            "schema": {
              "$ref": "#/definitions/AdvancedSearch"
            }
          },
          "404": {
            "description": "Target Advanced Search does not exist"
          }
        },
        "x-required-privileges": [
          "Delete Advanced Mobile Device Searches"
        ]
      },
      "parameters": []
    },
    "/devices/extensionAttributes": {
      "get": {
        "tags": [
          "mobile-device-extension-attributes"
        ],
        "description": "Gets Mobile Device Extension Attribute values placed in select parameter.",
        "parameters": [
          {
            "name": "select",
            "in": "query",
            "description": "Acceptable values currently include:\n* name\n",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response - Extension Attributes retrieved",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "x-required-privileges": [
          "Read Mobile Device Extension Attributes"
        ]
      },
      "parameters": []
    },
    "/engage": {
      "get": {
        "tags": [
          "engage"
        ],
        "description": "Get Engage settings\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Engage"
            }
          }
        },
        "x-required-privileges": [
          "Read Engage Settings"
        ]
      },
      "put": {
        "tags": [
          "engage"
        ],
        "description": "Update Engage settings\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Engage settings object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Engage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Engage settings updated",
            "schema": {
              "$ref": "#/definitions/Engage"
            }
          }
        },
        "x-required-privileges": [
          "Update Engage Settings"
        ]
      },
      "parameters": []
    },
    "/engage/history": {
      "get": {
        "tags": [
          "engage"
        ],
        "description": "Gets Engage settings history\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of Engage settings history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Engage Settings"
        ]
      },
      "parameters": []
    },
    "/engage/history/notes": {
      "post": {
        "tags": [
          "engage"
        ],
        "description": "Adds Engage settings history notes\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes to Engage settings history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          }
        },
        "x-required-privileges": [
          "Update Engage Settings"
        ]
      },
      "parameters": []
    },
    "/inventory-preload": {
      "get": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Returns all Inventory Preload records.",
        "produces": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "ASC",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InventoryPreloadRecordArray"
            }
          }
        },
        "x-required-privileges": [
          "Read Inventory Preload Records"
        ]
      },
      "post": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Create a new Inventory Preload record using JSON or CSV.\n\nA CSV template can be downloaded from /uapi/inventory-preload/csv-template.\n\nSerial number and device type are required. All other fields are optional.\nWhen a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data.\n\nIf the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro.\nIf the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro.\nFull Name,\nEmail Address,\nPhone Number,\nPosition.\n\nThis endpoint does not do full validation of each record in the CSV data.\nTo do full validation, use the /inventory-preload/validate-csv endpoint first.\n",
        "consumes": [
          "application/json",
          "text/csv"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Inventory Preload record or records to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryPreloadRecord"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/InventoryPreloadRecord"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "x-required-privileges": [
          "Create Inventory Preload Records"
        ]
      },
      "delete": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Deletes all Inventory Preload records.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "OK"
          }
        },
        "x-required-privileges": [
          "Delete Inventory Preload Records"
        ]
      },
      "parameters": []
    },
    "/inventory-preload/csv-template": {
      "get": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Retrieves the Inventory Preload CSV template.",
        "produces": [
          "text/csv"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-required-privileges": [
          "Read Inventory Preload Records"
        ]
      },
      "parameters": []
    },
    "/inventory-preload/history": {
      "get": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Gets Inventory Preload history entries.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Inventory Preload Records"
        ]
      },
      "parameters": []
    },
    "/inventory-preload/history/notes": {
      "post": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Adds Inventory Preload history object notes.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "History notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of Inventory Preload history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Inventory Preload object does not exist",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Inventory Preload Records"
        ]
      },
      "parameters": []
    },
    "/inventory-preload/validate-csv": {
      "post": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Validate a given CSV file.\n\nSerial number and device type are required. All other fields are optional.\n\nA CSV template can be downloaded from /uapi/inventory-preload/csv-template.\n",
        "consumes": [
          "text/csv"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Inventory Preload records to be validated. A CSV template can be downloaded from /uapi/inventory-preload/csv-template",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/InventoryPreloadInvalidCsvResponse"
            }
          }
        },
        "x-required-privileges": [
          "Create Inventory Preload Records"
        ],
        "x-action": true
      },
      "parameters": []
    },
    "/inventory-preload/{id}": {
      "get": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Retrieves an Inventory Preload record.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InventoryPreloadRecord"
            }
          },
          "404": {
            "description": "Inventory Preload record with specified ID does not exist"
          }
        },
        "x-required-privileges": [
          "Read Inventory Preload Records"
        ]
      },
      "put": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Updates an Inventory Preload record.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Inventory Preload record to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryPreloadRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/InventoryPreloadRecord"
            }
          },
          "404": {
            "description": "Inventory Preload record with specified ID does not exist"
          }
        },
        "x-required-privileges": [
          "Update Inventory Preload Records"
        ]
      },
      "delete": {
        "tags": [
          "inventory-preload"
        ],
        "description": "Deletes an Inventory Preload record.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "description": "Inventory Preload record with specified ID does not exist"
          }
        },
        "x-required-privileges": [
          "Delete Inventory Preload Records"
        ]
      },
      "parameters": []
    },
    "/inventory/obj/mobileDevice": {
      "get": {
        "tags": [
          "mobile-devices"
        ],
        "description": "Gets `MobileDevice` objects.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ArrayOfMobileDevices",
              "items": {
                "$ref": "#/definitions/MobileDevice"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Mobile Devices"
        ]
      },
      "parameters": []
    },
    "/inventory/obj/mobileDevice/{id}": {
      "get": {
        "tags": [
          "mobile-devices"
        ],
        "description": "Get MobileDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of mobile device record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response",
            "schema": {
              "$ref": "#/definitions/MobileDevice"
            }
          }
        },
        "x-required-privileges": [
          "Read Mobile Devices"
        ]
      },
      "parameters": []
    },
    "/inventory/obj/mobileDevice/{id}/detail": {
      "get": {
        "tags": [
          "mobile-devices"
        ],
        "description": "Get MobileDevice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of mobile device record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response",
            "schema": {
              "$ref": "#/definitions/MobileDeviceDetails"
            }
          }
        },
        "x-required-privileges": [
          "Read Mobile Devices"
        ]
      },
      "parameters": []
    },
    "/inventory/obj/mobileDevice/{id}/update": {
      "post": {
        "tags": [
          "mobile-devices"
        ],
        "description": "Updates fields on a mobile device that are allowed to be modified by users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of mobile device record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMobileDevice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful response",
            "schema": {
              "$ref": "#/definitions/MobileDeviceDetails"
            }
          }
        },
        "x-required-privileges": [
          "Update Mobile Devices"
        ]
      },
      "parameters": []
    },
    "/inventory/searchMobileDevices": {
      "post": {
        "tags": [
          "mobile-devices"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MobileDeviceSearchParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found buildings matching search params.",
            "schema": {
              "$ref": "#/definitions/MobileDeviceSearchResults"
            }
          }
        },
        "x-required-privileges": [
          "Read Mobile Devices"
        ]
      },
      "parameters": []
    },
    "/ldap/groups": {
      "get": {
        "tags": [
          "ldap-groups"
        ],
        "description": "Retrieves the configured access groups that contain the text in the searchParam.",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Will perform a \"contains\" search on the names of access groups",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search.",
            "schema": {
              "$ref": "#/definitions/LdapGroupSearchResults"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/ldap/servers": {
      "get": {
        "tags": [
          "ldap-servers"
        ],
        "description": "Retrieves all LDAP Servers.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully completed.",
            "schema": {
              "$ref": "#/definitions/LdapServer"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/mobileDevice/obj/mobileDevice/{id}/recalculateSmartGroups": {
      "post": {
        "tags": [
          "smart-mobile-device-groups"
        ],
        "description": "Recalculates all smart groups for the given device id and then\nreturns the count of smart groups the device falls into\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of mobile device",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/RecalculationResults"
            }
          },
          "400": {
            "description": "smart group not found"
          }
        },
        "x-required-privileges": [
          "Update Smart Mobile Device Groups"
        ]
      },
      "parameters": []
    },
    "/mobileDevice/obj/smartgroup/{id}/recalculate": {
      "post": {
        "tags": [
          "smart-mobile-device-groups"
        ],
        "description": "recalculates a smart group for the given id and then\nreturns the ids for the devices in the smart group\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of smart group",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/RecalculationResults"
            }
          },
          "400": {
            "description": "smart group not found"
          }
        },
        "x-required-privileges": [
          "Update Smart Mobile Device Groups"
        ]
      },
      "parameters": []
    },
    "/notifications/alerts": {
      "get": {
        "tags": [
          "jamf-pro-notifications"
        ],
        "description": "Gets notifications for user and site\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ArrayOfNotifications",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          }
        },
        "x-authentication-required": true
      },
      "parameters": []
    },
    "/notifications/alerts/{id}": {
      "delete": {
        "tags": [
          "jamf-pro-notifications"
        ],
        "description": "DEPRECATED - USE \"alerts/{type}/{id}\" INSTEAD. Deletes only Patch Management notifications.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance ID of the notification",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful deletion"
          },
          "403": {
            "description": "User is missing 'Dismiss Notifications' privilege"
          }
        },
        "x-required-privileges": [
          "Dismiss Notifications"
        ]
      },
      "parameters": []
    },
    "/notifications/alerts/{type}/{id}": {
      "delete": {
        "tags": [
          "jamf-pro-notifications"
        ],
        "description": "Deletes notifications. Options for 'type' are 'PRESTAGE_IMAGING_SECURITY' and 'PATCH_UPDATE'.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance ID of the notification",
            "required": true,
            "type": "integer"
          },
          {
            "name": "type",
            "in": "path",
            "description": "type of the notification",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessful deletion"
          },
          "403": {
            "description": "User is missing 'Dismiss Notifications' privilege"
          }
        },
        "x-required-privileges": [
          "Dismiss Notifications"
        ]
      },
      "parameters": []
    },
    "/patch/disclaimerAgree": {
      "post": {
        "tags": [
          "patches"
        ],
        "description": "Accept Patch reporting disclaimer",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-required-privileges": [
          "Update Patch Management Software Titles"
        ],
        "x-action": true
      },
      "parameters": []
    },
    "/patch/obj/policy/{policyId}": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Returns patch policy summary.",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "patch policy id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Patch policy summary found",
            "schema": {
              "$ref": "#/definitions/patchPolicySummaryObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/obj/policy/{policyId}/logs/eligibleRetryCount": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "return the count of the patch policy logs for the policyId that are eligible for a retry attempt",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "policy id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Number of patch policy logs found",
            "schema": {
              "type": "integer"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/obj/policy/{policyId}/softwareTitleConfigurationId": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Return the Software Title Configuration Id for the given patch policy.",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "description": "policy id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Found software title configuration id",
            "schema": {
              "type": "integer"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/obj/softwareTitle/{id}/policies": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Returns the summaries of the patch policies for the software title.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "software title id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Software Title patch policy summaries found",
            "schema": {
              "$ref": "#/definitions/softwareTitlePatchPolicySummariesObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/obj/softwareTitleConfiguration/{id}": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Returns the software title configuration.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "software title configuration id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Software Title Configuration found",
            "schema": {
              "$ref": "#/definitions/softwareTitleConfigurationObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Management Software Titles"
        ]
      },
      "parameters": []
    },
    "/patch/obj/{id}": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Returns active patch summary.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Active Patch Summary",
            "schema": {
              "$ref": "#/definitions/ActivePatchSummaryObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Management Software Titles"
        ]
      },
      "put": {
        "tags": [
          "patches"
        ],
        "description": "Updates patch report.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Active patch summary.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivePatchSummaryObj"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active Patch Summary",
            "schema": {
              "$ref": "#/definitions/ActivePatchSummaryObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Management Software Titles"
        ]
      },
      "parameters": []
    },
    "/patch/obj/{id}/versions": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Returns patch versions.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Patch versions",
            "schema": {
              "$ref": "#/definitions/PatchVersionObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Management Software Titles"
        ]
      },
      "parameters": []
    },
    "/patch/onDashboard": {
      "get": {
        "tags": [
          "patches"
        ],
        "description": "Returns list of patch ids on dashboard.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Instance IDs returned in associated array, or if no instances present, an empty array shall be returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Management Software Titles"
        ]
      },
      "parameters": []
    },
    "/patch/patch-policies": {
      "get": {
        "tags": [
          "patch-policies"
        ],
        "description": "Returns a list of patch policies.",
        "parameters": [
          {
            "name": "onDashboard",
            "in": "query",
            "description": "Filters whether or not the patch policies are on the dashboard.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filters whether or not the patch policies are enabled.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered list of patch policy summaries",
            "schema": {
              "$ref": "#/definitions/patchPolicySummaryObj"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/patch-policies/{id}/dashboard": {
      "get": {
        "tags": [
          "patch-policies"
        ],
        "description": "Returns whether or not the requested patch policy is on the dashboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch policy id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the Patch Policy is on the Dashboard.",
            "schema": {
              "$ref": "#/definitions/patchPolicyOnDashboard"
            }
          },
          "404": {
            "description": "The requested Patch Policy does not exist"
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "post": {
        "tags": [
          "patch-policies"
        ],
        "description": "Adds a patch policy to the dashboard.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch policy id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "delete": {
        "tags": [
          "patch-policies"
        ],
        "description": "Removes a patch policy from the dashboard.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/patch-policies/{id}/logs": {
      "get": {
        "tags": [
          "patch-policy-logs"
        ],
        "description": "Returns the patch policy attempt details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "patch policy id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "device-id",
            "in": "query",
            "description": "device id",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Patch Policy Attempt Details",
            "schema": {
              "$ref": "#/definitions/PatchPolicyAttempt"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/retryPolicy": {
      "post": {
        "tags": [
          "patches"
        ],
        "description": "Retry policy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/retryPatchPolicyParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-required-privileges": [
          "Update Patch Policies"
        ]
      },
      "parameters": []
    },
    "/patch/searchActivePatchHistory": {
      "post": {
        "tags": [
          "patches"
        ],
        "description": "Searches the history for a specific active patch.  This is used to get detailed information about the computers/devices that a specific patch has been applied to.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Parameters for search",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchActivePatchHistoryParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results.  No matches will be indicated by the return of an empty list.",
            "schema": {
              "$ref": "#/definitions/SearchActivePatchHistoryResults"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Management Software Titles"
        ]
      },
      "parameters": []
    },
    "/patch/searchPatchPolicyLogs": {
      "post": {
        "tags": [
          "patches"
        ],
        "description": "Return patch policy logs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/searchPatchPolicyLogParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patch policy logs found",
            "schema": {
              "$ref": "#/definitions/searchPatchPolicyLogResults"
            }
          }
        },
        "x-required-privileges": [
          "Read Patch Policies"
        ]
      },
      "parameters": []
    },
    "/self-service/branding/configurations": {
      "get": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Search for sorted and paged branding configurations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Specifies the attribute to sort by. Defaults to ascending order. Prefix the attribute name with a minus (-) symbol for descending order.",
            "required": false,
            "type": "string",
            "default": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/BrandingSearchResults"
            }
          }
        },
        "x-required-privileges": [
          "Read Self Service Branding Configuration"
        ]
      },
      "post": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Create a Self Service branding configuration with the supplied details",
        "parameters": [
          {
            "in": "body",
            "name": "Branding configuration",
            "description": "The branding configuration to create",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BrandingConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/BrandingConfiguration"
            }
          }
        },
        "x-required-privileges": [
          "Create Self Service Branding Configuration"
        ]
      },
      "parameters": []
    },
    "/self-service/branding/configurations/{id}": {
      "get": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Read a single Self Service branding configuration indicated by the provided id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of branding configuration",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/BrandingConfiguration"
            },
            "examples": {
              "iOS Branding": {
                "id": 1,
                "name": "Test iOS Branding",
                "operatingSystem": "IOS",
                "iconUrl": "http://jamfUrl/icon/1"
              },
              "macOS Branding": {
                "id": 2,
                "name": "Test macOS Branding",
                "operatingSystem": "MACOS",
                "iconUrl": "http://jamfUrl/icon/1"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Self Service Branding Configuration"
        ]
      },
      "put": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Update a Self Service branding configuration with the supplied details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of branding configuration",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "Branding configuration",
            "description": "The branding configuration values to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BrandingConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/BrandingConfiguration"
            }
          },
          "404": {
            "description": "Invalid id"
          }
        },
        "x-required-privileges": [
          "Update Self Service Branding Configuration"
        ]
      },
      "delete": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Delete the Self Service branding configuration indicated by the provided id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of branding configuration",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "404": {
            "description": "Invalid id"
          }
        },
        "x-required-privileges": [
          "Delete Self Service Branding Configuration"
        ]
      },
      "parameters": []
    },
    "/self-service/branding/images": {
      "post": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Uploads an image",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Image successfully uploaded",
            "schema": {
              "$ref": "#/definitions/BrandingImageUrl"
            }
          }
        },
        "x-required-privileges": [
          "Update Self Service Branding Configuration"
        ]
      },
      "parameters": []
    },
    "/self-service/branding/images/{id}": {
      "get": {
        "tags": [
          "self-service-branding"
        ],
        "description": "Downloads the image that associates with the id supplied",
        "produces": [
          "image/png",
          "image/jpeg",
          "image/gif"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of image",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "404": {
            "description": "Invalid id"
          }
        },
        "x-authentication-required": false
      },
      "parameters": []
    },
    "/settings/deleteBuildings": {
      "post": {
        "tags": [
          "buildings"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ids of buildings to be deleted",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All building ids passed in request sucessfully deleted."
          },
          "400": {
            "description": "Request processed.  Returns ids and error codes of any buildings unable to be deleted.  Expected error codes: INVALID_ID - id does not exist SYSTEM_EXCEPTION - a system exception occured trying to delete the building.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Delete Buildings"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Gets Enrollment object and re-enrollment settings.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "title": "EnrollmentObject",
              "$ref": "#/definitions/LegacyEnrollment"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "put": {
        "tags": [
          "enrollment"
        ],
        "description": "Update enrollment object",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update enrollment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LegacyEnrollment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful updated enrollment object",
            "schema": {
              "$ref": "#/definitions/LegacyEnrollment"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/access-groups": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Retrieves the configured LDAP groups configured for User-Initiated Enrollment.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "Found access groups matching search params.",
            "schema": {
              "$ref": "#/definitions/SearchResultsAccessGroups"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/access-groups/{group-key}": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Retrieves the configured LDAP groups configured for User-Initiated Enrollment.",
        "parameters": [
          {
            "name": "group-key",
            "in": "path",
            "description": "The group key is a string composed of the LDAP server ID and underscore and the LDAP group ID. Example, \"1_2\".",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "schema": {
              "$ref": "#/definitions/EnrollmentAccessGroup"
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "put": {
        "tags": [
          "enrollment"
        ],
        "description": "Modifies the configured LDAP groups configured for User-Initiated Enrollment.",
        "parameters": [
          {
            "name": "group-key",
            "in": "path",
            "description": "The group key is a string composed of the LDAP server ID and underscore and the LDAP group ID. Example, \"1_2\".",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnrollmentAccessGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "schema": {
              "$ref": "#/definitions/EnrollmentAccessGroup"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "delete": {
        "tags": [
          "enrollment"
        ],
        "description": "Deletes an LDAP group's access to user initiated enrollment. The group \"All LDAP Users\" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.",
        "parameters": [
          {
            "name": "group-key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/filtered-language-codes": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LanguageCode"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/history": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Gets Enrollment history object\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of enrollment history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Enrollment object does not exist",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/history/notes": {
      "post": {
        "tags": [
          "enrollment"
        ],
        "description": "Adds Enrollment history object notes\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of enrollment history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Enrollment object does not exist",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/language-codes": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Retrieves the list of languages and corresponding ISO 639-1 Codes.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of languages and corresponding ISO 639-1 Codes.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LanguageCode"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/languages": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Returns an array of the language codes that have enrollment messaging currently configured.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "languageCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Found languages matching search params.",
            "schema": {
              "$ref": "#/definitions/SearchResultsProcessTexts"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/languages/{language}": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Retrieves the enrollment messaging for a language.",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "Two letter ISO 639-1 Language Code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/EnrollmentProcessTextObject"
            }
          },
          "404": {
            "description": "Language not found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "put": {
        "tags": [
          "enrollment"
        ],
        "description": "Edit enrollment messaging for a language.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnrollmentProcessTextObject"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "Two letter ISO 639-1 Language Code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/EnrollmentProcessTextObject"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "delete": {
        "tags": [
          "enrollment"
        ],
        "description": "Delete the enrollment messaging for a language.",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "Two letter ISO 639-1 Language Code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletetion"
          },
          "404": {
            "description": "Language not found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/enrollment/settings": {
      "get": {
        "tags": [
          "enrollment"
        ],
        "description": "Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for managementPassword:  \\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "title": "EnrollmentObject",
              "$ref": "#/definitions/EnrollmentSettings"
            }
          }
        },
        "x-required-privileges": [
          "Read User-Initiated Enrollment"
        ]
      },
      "put": {
        "tags": [
          "enrollment"
        ],
        "description": "Update enrollment object. Regarding the `developerCertificateIdentity`, if this object is omitted, the certificate will not be deleted from Jamf Pro. The identityKeystore is the entire cert file as a base64 encoded string. The md5Sum field is not required in the PUT request, but is calculated and returned in the response.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update enrollment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnrollmentSettings"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful updated enrollment object",
            "schema": {
              "$ref": "#/definitions/EnrollmentSettings"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update User-Initiated Enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/issueTomcatSslCertificate": {
      "post": {
        "tags": [
          "tomcat-settings"
        ],
        "description": "generate a SSL Certificate using Jamf Certificate Authority",
        "parameters": [],
        "responses": {
          "200": {
            "description": "SSL certificate created successfully"
          }
        },
        "x-required-privileges": [
          "Update Apache Tomcat Settings"
        ],
        "x-action": true
      },
      "parameters": []
    },
    "/settings/obj/building": {
      "get": {
        "tags": [
          "buildings"
        ],
        "description": "Search for sorted and paged buildings",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/BuildingSearchResults"
            }
          }
        },
        "x-required-privileges": [
          "Read Buildings"
        ]
      },
      "post": {
        "tags": [
          "buildings"
        ],
        "description": "Create building record\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "building object to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Building"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Building record was created",
            "schema": {
              "$ref": "#/definitions/Building"
            }
          }
        },
        "x-required-privileges": [
          "Create Buildings"
        ]
      },
      "parameters": []
    },
    "/settings/obj/building/{id}": {
      "get": {
        "tags": [
          "buildings"
        ],
        "description": "Gets specified Building object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of building record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of building were found",
            "schema": {
              "$ref": "#/definitions/Building"
            }
          },
          "404": {
            "description": "Specified building object does not exist."
          }
        },
        "x-required-privileges": [
          "Read Buildings"
        ]
      },
      "put": {
        "tags": [
          "buildings"
        ],
        "description": "Update specified building object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of building record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "building object to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Building"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Building update",
            "schema": {
              "$ref": "#/definitions/Building"
            }
          }
        },
        "x-required-privileges": [
          "Update Buildings"
        ]
      },
      "delete": {
        "tags": [
          "buildings"
        ],
        "description": "Removes specified building record\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of building record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Building record was deleted"
          }
        },
        "x-required-privileges": [
          "Delete Buildings"
        ]
      },
      "parameters": []
    },
    "/settings/obj/building/{id}/history": {
      "get": {
        "tags": [
          "buildings"
        ],
        "description": "Gets specified Building history object \n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of building history record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of building history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Specified building object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Buildings"
        ]
      },
      "parameters": []
    },
    "/settings/obj/building/{id}/history/notes": {
      "post": {
        "tags": [
          "buildings"
        ],
        "description": "Adds specified Building history object notes \n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of building history record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of building history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Specified building object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Buildings"
        ]
      },
      "parameters": []
    },
    "/settings/obj/cache": {
      "get": {
        "tags": [
          "cache-settings"
        ],
        "description": "gets cache settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "cache settings",
            "schema": {
              "$ref": "#/definitions/cacheSettings"
            }
          }
        },
        "x-required-privileges": [
          "Read Cache"
        ]
      },
      "put": {
        "tags": [
          "cache-settings"
        ],
        "description": "updates cache settings\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cacheSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cache has been updated",
            "schema": {
              "$ref": "#/definitions/cacheSettings"
            }
          },
          "403": {
            "description": "The following code is returned by this call:\n\nHOSTED_ENVIRONMENT - PUT command is not available in hosted environments.\n"
          }
        },
        "x-required-privileges": [
          "Update Cache"
        ]
      },
      "parameters": []
    },
    "/settings/obj/category": {
      "get": {
        "tags": [
          "categories"
        ],
        "description": "Gets `Category` objects.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ArrayOfCategories",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Categories"
        ]
      },
      "post": {
        "tags": [
          "categories"
        ],
        "description": "Create category record\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "category object to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category record was created",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "x-required-privileges": [
          "Create Categories"
        ]
      },
      "parameters": []
    },
    "/settings/obj/category/deleteCategories": {
      "post": {
        "tags": [
          "categories"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ids of categories to be deleted",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All category ids passed in request sucessfully deleted."
          },
          "400": {
            "description": "Request processed.  Returns ids and error codes of any categories unable to be deleted.  Expected error codes: INVALID_ID - id does not exist SYSTEM_EXCEPTION - a system exception occured trying to delete the category.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Delete Categories"
        ]
      },
      "parameters": []
    },
    "/settings/obj/category/searchCategories": {
      "post": {
        "tags": [
          "categories"
        ],
        "description": "Search for sorted and paged categories",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found categories matching search params.",
            "schema": {
              "$ref": "#/definitions/SearchResultsCategories"
            }
          }
        },
        "x-required-privileges": [
          "Read Categories"
        ]
      },
      "parameters": []
    },
    "/settings/obj/category/{id}": {
      "get": {
        "tags": [
          "categories"
        ],
        "description": "Gets specified Category object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of category record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of category were found",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Specified category object does not exist."
          }
        },
        "x-required-privileges": [
          "Read Categories"
        ]
      },
      "put": {
        "tags": [
          "categories"
        ],
        "description": "Update specified category object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of category record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "category object to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category record was updated",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        },
        "x-required-privileges": [
          "Update Categories"
        ]
      },
      "delete": {
        "tags": [
          "categories"
        ],
        "description": "Removes specified category record\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of category record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Category record was deleted"
          }
        },
        "x-required-privileges": [
          "Delete Categories"
        ]
      },
      "parameters": []
    },
    "/settings/obj/category/{id}/history": {
      "get": {
        "tags": [
          "categories"
        ],
        "description": "Gets specified Category history object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of category history record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of category history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Specified category object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Categories"
        ]
      },
      "parameters": []
    },
    "/settings/obj/category/{id}/history/notes": {
      "post": {
        "tags": [
          "categories"
        ],
        "description": "Adds specified Category history object notes\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of category history record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of category history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Specified category object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Categories"
        ]
      },
      "parameters": []
    },
    "/settings/obj/checkIn": {
      "get": {
        "tags": [
          "client-check-in"
        ],
        "description": "Gets `Client Check-In` object.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ClientCheckIn"
            }
          }
        },
        "x-required-privileges": [
          "Read Computer Check-In"
        ]
      },
      "put": {
        "tags": [
          "client-check-in"
        ],
        "description": "Update Client Check-In object\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Client Check-In object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientCheckIn"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Client Check-In was updated",
            "schema": {
              "$ref": "#/definitions/ClientCheckIn"
            }
          }
        },
        "x-required-privileges": [
          "Update Computer Check-In"
        ]
      },
      "parameters": []
    },
    "/settings/obj/checkIn/history": {
      "get": {
        "tags": [
          "client-check-in"
        ],
        "description": "Gets Client Check-In history object\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of Client Check-In history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Client Check-In object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Computer Check-In"
        ]
      },
      "parameters": []
    },
    "/settings/obj/checkIn/history/notes": {
      "post": {
        "tags": [
          "client-check-in"
        ],
        "description": "Adds Client Check-In history object notes\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of Client Check-In history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Client Check-In object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Computer Check-In"
        ]
      },
      "parameters": []
    },
    "/settings/obj/department": {
      "get": {
        "tags": [
          "departments"
        ],
        "description": "Gets `Department` objects.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "title": "ArrayOfDepartments",
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Departments"
        ]
      },
      "post": {
        "tags": [
          "departments"
        ],
        "description": "Create department record\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "department object to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department record was created",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        },
        "x-required-privileges": [
          "Create Departments"
        ]
      },
      "parameters": []
    },
    "/settings/obj/department/deleteDepartments": {
      "post": {
        "tags": [
          "departments"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ids of departments to be deleted. pass in an array of ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All department ids passed in request sucessfully deleted."
          },
          "400": {
            "description": "Request processed.  Returns ids and error codes of any departments unable to be deleted.  Expected error codes: INVALID_ID - id does not exist SYSTEM_EXCEPTION - a system exception occured trying to delete the department.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Delete Departments"
        ]
      },
      "parameters": []
    },
    "/settings/obj/department/searchDepartments": {
      "post": {
        "tags": [
          "departments"
        ],
        "description": "Search for sorted and paged departments",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found departments matching search params.",
            "schema": {
              "$ref": "#/definitions/SearchResultsDepartments"
            }
          }
        },
        "x-required-privileges": [
          "Read Departments"
        ]
      },
      "parameters": []
    },
    "/settings/obj/department/{id}": {
      "get": {
        "tags": [
          "departments"
        ],
        "description": "Gets specified Department object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of department record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of department were found",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          },
          "404": {
            "description": "Specified department object does not exist."
          }
        },
        "x-required-privileges": [
          "Read Departments"
        ]
      },
      "put": {
        "tags": [
          "departments"
        ],
        "description": "Update specified department object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of department record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "department object to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Department update",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        },
        "x-required-privileges": [
          "Update Departments"
        ]
      },
      "delete": {
        "tags": [
          "departments"
        ],
        "description": "Removes specified department record\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of department record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Department record was deleted"
          }
        },
        "x-required-privileges": [
          "Delete Departments"
        ]
      },
      "parameters": []
    },
    "/settings/obj/department/{id}/history": {
      "get": {
        "tags": [
          "departments"
        ],
        "description": "Gets specified Department history object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of department history record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of department history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Specified department object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Departments"
        ]
      },
      "parameters": []
    },
    "/settings/obj/department/{id}/history/notes": {
      "post": {
        "tags": [
          "departments"
        ],
        "description": "Adds specified Department history object notes\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of department history record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of department history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Specified department object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Departments"
        ]
      },
      "parameters": []
    },
    "/settings/obj/policyProperties": {
      "get": {
        "tags": [
          "policies"
        ],
        "description": "Gets `Policy Properties` object.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/PolicyProperties"
            }
          }
        },
        "x-required-privileges": [
          "Read Policies"
        ]
      },
      "put": {
        "tags": [
          "policies"
        ],
        "description": "Update Policy Properties object (NOTE: isPoliciesRequireNetworkStateChange is a calculated value and will be ignored.)\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Policy Properties object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyProperties"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy Properties was updated",
            "schema": {
              "$ref": "#/definitions/PolicyProperties"
            }
          }
        },
        "x-required-privileges": [
          "Update Policies"
        ]
      },
      "parameters": []
    },
    "/settings/obj/reenrollment": {
      "get": {
        "tags": [
          "re-enrollment"
        ],
        "description": "Gets Re-enrollment object\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of Re-enrollment object were found",
            "schema": {
              "$ref": "#/definitions/Reenrollment"
            }
          },
          "404": {
            "description": "Re-enrollment object does not exist."
          }
        },
        "x-required-privileges": [
          "Read Re-enrollment"
        ]
      },
      "put": {
        "tags": [
          "re-enrollment"
        ],
        "description": "Update the Re-enrollment object\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Re-enrollment object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Reenrollment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Re-enrollment record was updated",
            "schema": {
              "$ref": "#/definitions/Reenrollment"
            }
          }
        },
        "x-required-privileges": [
          "Update Re-enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/obj/reenrollment/history": {
      "get": {
        "tags": [
          "re-enrollment"
        ],
        "description": "Gets Re-enrollment history object\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of re-enrollment history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Re-enrollment object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Re-enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/obj/reenrollment/history/notes": {
      "post": {
        "tags": [
          "re-enrollment"
        ],
        "description": "Adds specified Re-enrollment history object notes\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of re-enrollment history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Specified re-enrollment history object does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Re-enrollment"
        ]
      },
      "parameters": []
    },
    "/settings/obj/selfservice": {
      "get": {
        "tags": [
          "self-service"
        ],
        "description": "gets an object representation of Self Service settings\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful GET\n",
            "schema": {
              "$ref": "#/definitions/SelfServiceSettings"
            }
          }
        },
        "x-required-privileges": [
          "Read Self Service"
        ]
      },
      "put": {
        "tags": [
          "self-service"
        ],
        "description": "puts an object representation of Self Service settings\n",
        "parameters": [
          {
            "in": "body",
            "name": "SelfServiceSettings",
            "description": "object that contains all editable global fields to alter Self Service settings\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SelfServiceSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful PUT\n",
            "schema": {
              "$ref": "#/definitions/SelfServiceSettings"
            }
          }
        },
        "x-required-privileges": [
          "Update Self Service"
        ]
      },
      "parameters": []
    },
    "/settings/scripts": {
      "get": {
        "tags": [
          "scripts"
        ],
        "description": "Search for sorted and paged scripts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "id"
          }
        ],
        "responses": {
          "200": {
            "description": "Found scripts matching search params.",
            "schema": {
              "$ref": "#/definitions/SearchResultsScripts"
            }
          }
        },
        "x-required-privileges": [
          "Read Scripts"
        ]
      },
      "post": {
        "tags": [
          "scripts"
        ],
        "description": "Creates a script",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "new script to create. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Script created successfully",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          }
        },
        "x-required-privileges": [
          "Create Scripts"
        ]
      },
      "parameters": []
    },
    "/settings/scripts/{id}": {
      "get": {
        "tags": [
          "scripts"
        ],
        "description": "Retrieves a full script object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "404": {
            "description": "Script with that ID does not exist"
          }
        },
        "x-required-privileges": [
          "Read Scripts"
        ]
      },
      "put": {
        "tags": [
          "scripts"
        ],
        "description": "Replaces the script at the id with the supplied information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "new script to upload to existing id. ids defined in this body will be ignored",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Script"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Script at id was updated",
            "schema": {
              "$ref": "#/definitions/Script"
            }
          },
          "404": {
            "description": "Script with that id does not exist",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update Scripts"
        ]
      },
      "delete": {
        "tags": [
          "scripts"
        ],
        "description": "Deletes a script at the specified id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-required-privileges": [
          "Delete Scripts"
        ]
      },
      "parameters": []
    },
    "/settings/scripts/{id}/download": {
      "get": {
        "tags": [
          "scripts"
        ],
        "description": "Download a text file of the script contents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the script to be downloaded",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The script of the specified id",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "x-required-privileges": [
          "Read Scripts"
        ]
      },
      "parameters": []
    },
    "/settings/scripts/{id}/history": {
      "get": {
        "tags": [
          "scripts"
        ],
        "description": "Gets specified Script history object\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of script history record",
            "required": true,
            "type": "number",
            "format": "int"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "Specified script does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Scripts"
        ]
      },
      "parameters": []
    },
    "/settings/scripts/{id}/history/notes": {
      "post": {
        "tags": [
          "scripts"
        ],
        "description": "Adds specified Script history object notes\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "instance id of script history record",
            "required": true,
            "type": "number",
            "format": "int"
          },
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of script history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "Specified script does not exist.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read Scripts"
        ]
      },
      "parameters": []
    },
    "/settings/sites": {
      "get": {
        "tags": [
          "sites"
        ],
        "description": "Found all sites.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          }
        },
        "x-required-privileges": [
          "Read Sites"
        ]
      },
      "parameters": []
    },
    "/settings/sso": {
      "get": {
        "tags": [
          "sso-settings"
        ],
        "description": "Retrieves the current Single Sign On configuration settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/SsoSettings"
            }
          }
        },
        "x-required-privileges": [
          "Read SSO Settings"
        ]
      },
      "put": {
        "tags": [
          "sso-settings"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SsoSettings"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The update was successful and the newly updated object is returned.",
            "schema": {
              "$ref": "#/definitions/SsoSettings"
            }
          },
          "400": {
            "description": "Bad Request. Either required fields are missing or there was a validation exception.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update SSO Settings"
        ]
      },
      "parameters": []
    },
    "/settings/sso/cert": {
      "get": {
        "tags": [
          "sso-certificate"
        ],
        "description": "Retrieves the certificate currently configured for use with SSO.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "schema": {
              "$ref": "#/definitions/SsoKeystoreWithDetails"
            }
          }
        },
        "x-required-privileges": [
          "Read SSO Settings"
        ]
      },
      "post": {
        "tags": [
          "sso-certificate"
        ],
        "description": "Jamf Pro will generate a new certificate and use it to sign SSO requests to the identity provider.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Newly generated will be set and returned.",
            "schema": {
              "$ref": "#/definitions/SsoKeystoreWithDetails"
            }
          }
        },
        "x-required-privileges": [
          "Update SSO Settings"
        ],
        "x-action": true
      },
      "put": {
        "tags": [
          "sso-certificate"
        ],
        "description": "Update the certificate used by Jamf Pro to sign SSO requests to the identify provider.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SsoKeystore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed the keystore.",
            "schema": {
              "$ref": "#/definitions/SsoKeystoreWithDetails"
            }
          },
          "400": {
            "description": "One or more parameters were invalid.",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update SSO Settings"
        ]
      },
      "delete": {
        "tags": [
          "sso-certificate"
        ],
        "description": "Deletes the currently configured certificate used by SSO.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Operation successful."
          }
        },
        "x-required-privileges": [
          "Update SSO Settings"
        ]
      },
      "parameters": []
    },
    "/settings/sso/cert/download": {
      "get": {
        "tags": [
          "sso-certificate"
        ],
        "description": "Downloads the certificate currently configured for use with Jamf Pro's SSO configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Request successful",
            "schema": {
              "type": "file"
            }
          }
        },
        "x-required-privileges": [
          "Read SSO Settings"
        ]
      },
      "parameters": []
    },
    "/settings/sso/history": {
      "get": {
        "tags": [
          "sso-settings"
        ],
        "description": "Gets SSO history object\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of SSO history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          },
          "404": {
            "description": "SSO object does not exist",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Read SSO Settings"
        ]
      },
      "parameters": []
    },
    "/settings/sso/history/notes": {
      "post": {
        "tags": [
          "sso-settings"
        ],
        "description": "Adds SSO history object notes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "history notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes of SSO history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "404": {
            "description": "SSO object does not exist",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update SSO Settings"
        ]
      },
      "parameters": []
    },
    "/settings/sso/metadata/download": {
      "get": {
        "tags": [
          "sso-settings"
        ],
        "description": "Download the Jamf Pro SAML metadata file",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful resposne"
          }
        },
        "x-required-privileges": [
          "Read SSO Settings"
        ]
      },
      "parameters": []
    },
    "/startup-status": {
      "get": {
        "tags": [
          "startup-status"
        ],
        "description": "Retrieves information about application startup. Current startup operation taking place (if any) and overall startup completion percentage.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StartupStatus"
            }
          }
        },
        "x-authentication-required": false
      },
      "parameters": []
    },
    "/system/initialize": {
      "post": {
        "tags": [
          "jamf-pro-initialization"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Initialize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The following are codes returned by this call:\n\nINVALID_ACTIVATION_CODE - activation code provided is not valid or is expired\n\nINVALID_STATE - The system is in an invalid state to be initialized.\n\nFIELD_REQUIRED - A required field was not provided.  The field name will be provided on the response.\n"
          }
        },
        "x-authentication-required": false
      },
      "parameters": []
    },
    "/system/obj/info": {
      "get": {
        "tags": [
          "jamf-pro-information"
        ],
        "description": "Gets `systemInformation` object.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/SystemInformation"
            }
          }
        },
        "x-authentication-required": false
      },
      "parameters": []
    },
    "/user": {
      "get": {
        "tags": [
          "user-session"
        ],
        "description": "Return all Jamf Pro user acounts.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all Jamf Pro user acounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read Accounts"
        ]
      },
      "parameters": []
    },
    "/user/obj/preference/{key}": {
      "get": {
        "tags": [
          "jamf-pro-user-account-settings"
        ],
        "description": "Gets the user setting for the authenticated user and key.\n",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "user setting to be retrieved",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "setting not found"
          }
        },
        "x-authentication-required": true
      },
      "put": {
        "tags": [
          "jamf-pro-user-account-settings"
        ],
        "description": "Persists the user setting\n",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key of user setting to be persisted",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "user setting value to be persisted",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "setting sucessfully updated",
            "schema": {
              "type": "string"
            }
          }
        },
        "x-authentication-required": true
      },
      "delete": {
        "tags": [
          "jamf-pro-user-account-settings"
        ],
        "description": "Remove specified setting for authenticated user\n",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key of user setting to be persisted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "setting was deleted"
          },
          "404": {
            "description": "setting not found"
          }
        },
        "x-authentication-required": true
      },
      "parameters": []
    },
    "/user/updateSession": {
      "post": {
        "tags": [
          "user-session"
        ],
        "description": "Updates values in the user's current session.\n",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Values to update in user's current session.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's current session has been sucessfully updated.",
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        },
        "x-authentication-required": true
      },
      "parameters": []
    },
    "/v1/jamf-pro-server-url": {
      "get": {
        "tags": [
          "jamf-pro-server-url"
        ],
        "description": "Get Jamf Pro Server URL settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/JamfProServerUrl"
            }
          }
        },
        "x-required-privileges": [
          "Read JSS URL"
        ]
      },
      "put": {
        "tags": [
          "jamf-pro-server-url"
        ],
        "description": "Update Jamf Pro Server URL settings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Jamf Pro Server URL settings object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JamfProServerUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jamf Pro Server URL settings updated",
            "schema": {
              "$ref": "#/definitions/JamfProServerUrl"
            }
          },
          "403": {
            "description": "Jamf Pro Server URL is managed by Jamf Cloud",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update JSS URL"
        ]
      },
      "parameters": []
    },
    "/v1/jamf-pro-server-url/history": {
      "get": {
        "tags": [
          "jamf-pro-server-url"
        ],
        "description": "Gets Jamf Pro Server URL settings history",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of Jamf Pro Server URL settings history were found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/History"
              }
            }
          }
        },
        "x-required-privileges": [
          "Read JSS URL"
        ]
      },
      "post": {
        "tags": [
          "jamf-pro-server-url"
        ],
        "description": "Adds Jamf Pro Server URL settings history notes",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "History notes to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notes to Jamf Pro Server URL settings history were added",
            "schema": {
              "$ref": "#/definitions/History"
            }
          },
          "403": {
            "description": "Jamf Pro Server URL is managed by Jamf Cloud",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "x-required-privileges": [
          "Update JSS URL"
        ]
      },
      "parameters": []
    },
    "/vpp/admin-accounts": {
      "get": {
        "tags": [
          "vpp-admin-accounts"
        ],
        "description": "Found all vpp admin accounts.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/VPPAdminAccount"
            }
          }
        },
        "x-required-privileges": [
          "Read VPP Administrator Accounts"
        ]
      },
      "parameters": []
    },
    "/vpp/subscriptions": {
      "get": {
        "tags": [
          "vpp-subscriptions"
        ],
        "description": "Found all vpp - subscriptions.\n",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/VppTokenSubscription"
            }
          }
        },
        "x-required-privileges": [
          "Read VPP Administrator Accounts"
        ]
      },
      "parameters": []
    },
    "/vpp/subscriptions/{id}": {
      "get": {
        "tags": [
          "vpp-subscriptions"
        ],
        "description": "Found vpp subscription by id.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of vpp subscription to be retrieved",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/VppTokenSubscription"
            }
          }
        },
        "x-required-privileges": [
          "Read VPP Administrator Accounts"
        ]
      },
      "parameters": []
    }
  },
  "definitions": {
    "Account": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "username": {
          "type": "string",
          "example": "admin"
        },
        "realName": {
          "type": "string",
          "example": "IT Bob"
        },
        "email": {
          "type": "string",
          "example": "ITBob@Jamf.com"
        },
        "preferences": {
          "$ref": "#/definitions/AccountPreferences"
        },
        "isMultiSiteAdmin": {
          "type": "boolean",
          "example": false
        },
        "accessLevel": {
          "type": "string",
          "example": "FullAccess",
          "enum": [
            "FullAccess",
            "SiteAccess",
            "GroupBasedAccess"
          ]
        },
        "privilegeSet": {
          "type": "string",
          "example": "CUSTOM",
          "enum": [
            "ADMINISTRATOR",
            "AUDITOR",
            "ENROLLMENT",
            "CUSTOM"
          ]
        },
        "privilegesBySite": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "example": ""
          }
        },
        "currentSiteId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "DeviceEnrollmentInstance": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Example Device Enrollment Instance"
        },
        "supervisionIdentityId": {
          "type": "integer",
          "example": 1
        },
        "siteId": {
          "type": "integer",
          "example": -1
        },
        "serverName": {
          "type": "string",
          "example": "Acme ASM"
        },
        "serverUuid": {
          "type": "string",
          "example": "BASD08C11F3C455"
        },
        "adminId": {
          "type": "string",
          "example": "admin1234"
        },
        "orgName": {
          "type": "string",
          "example": "Acme Enterprises"
        },
        "orgEmail": {
          "type": "string",
          "example": "admin@test.com"
        },
        "orgPhone": {
          "type": "string",
          "example": "555-0123"
        },
        "orgAddress": {
          "type": "string",
          "example": "124 Conch Street, Bikini Bottom, Pacific Ocean"
        },
        "tokenExpirationDate": {
          "type": "string",
          "example": "10/10/2000"
        }
      }
    },
    "ClientCheckIn": {
      "properties": {
        "checkInFrequency": {
          "type": "integer",
          "format": "int32",
          "default": 15
        },
        "isCreateHooks": {
          "type": "boolean",
          "default": false
        },
        "isHookLog": {
          "type": "boolean",
          "default": false
        },
        "isHookPolicies": {
          "type": "boolean",
          "default": false
        },
        "isHookHideRestore": {
          "type": "boolean",
          "default": false
        },
        "isHookMCX": {
          "type": "boolean",
          "default": false
        },
        "isBackgroundHooks": {
          "type": "boolean",
          "default": false
        },
        "isHookDisplayStatus": {
          "type": "boolean",
          "default": false
        },
        "isCreateStartupScript": {
          "type": "boolean",
          "default": false
        },
        "isStartupLog": {
          "type": "boolean",
          "default": false
        },
        "isStartupPolicies": {
          "type": "boolean",
          "default": false
        },
        "isStartupSSH": {
          "type": "boolean",
          "default": false
        },
        "isStartupMCX": {
          "type": "boolean",
          "default": false
        },
        "isEnableLocalConfigurationProfiles": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "exclusions": {
      "type": "object",
      "properties": {
        "computers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/computers"
          }
        },
        "computerGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/computerGroups"
          }
        },
        "mobileDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mobileDevices"
          }
        },
        "mobileDeviceGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mobileDeviceGroups"
          }
        },
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/buildings"
          }
        },
        "departments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/departments"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/users"
          }
        },
        "userGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userGroups"
          }
        },
        "limitations": {
          "$ref": "#/definitions/limitations"
        }
      }
    },
    "History": {
      "properties": {
        "username": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "details": {
          "type": "string"
        }
      }
    },
    "Security": {
      "properties": {
        "isDataProtected": {
          "type": "boolean",
          "example": false
        },
        "isBlockLevelEncryptionCapable": {
          "type": "boolean",
          "example": true
        },
        "isFileLevelEncryptionCapable": {
          "type": "boolean",
          "example": true
        },
        "isPasscodePresent": {
          "type": "boolean",
          "example": false
        },
        "isPasscodeCompliant": {
          "type": "boolean",
          "example": true
        },
        "isPasscodeCompliantWithProfile": {
          "type": "boolean",
          "example": true
        },
        "hardwareEncryption": {
          "type": "integer",
          "example": 3
        },
        "isActivationLockEnabled": {
          "type": "boolean",
          "example": false
        },
        "isJailBreakDetected": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Initialize": {
      "properties": {
        "activationCode": {
          "type": "string",
          "example": "VFAB-YDAB-DFAB-UDAB-DEAB-EFAB-ABAB-DEAB"
        },
        "institutionName": {
          "type": "string",
          "example": "Jamf"
        },
        "isEulaAccepted": {
          "type": "boolean",
          "example": false
        },
        "username": {
          "type": "string",
          "example": "admin"
        },
        "password": {
          "type": "string",
          "example": "12345"
        },
        "email": {
          "type": "string",
          "example": "ITBob@jamf.com"
        },
        "jssUrl": {
          "type": "string",
          "example": "https://jamf.jamfcloud.com"
        }
      }
    },
    "InventoryPreloadExtensionAttribute": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "InventoryPreloadRecordArray": {
      "properties": {
        "totalCount": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryPreloadRecord"
          }
        }
      }
    },
    "LdapServer": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "An LDAP Server."
    },
    "Department": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Department of Redundancy Department"
        }
      }
    },
    "Purchasing": {
      "properties": {
        "isPurchased": {
          "type": "boolean",
          "example": true
        },
        "isLeased": {
          "type": "boolean",
          "example": false
        },
        "poNumber": {
          "type": "string",
          "example": "8675309"
        },
        "vendor": {
          "type": "string",
          "example": "Apple"
        },
        "appleCareId": {
          "type": "string",
          "example": "9546567.0"
        },
        "purchasePrice": {
          "type": "string",
          "example": "$399"
        },
        "purchasingAccount": {
          "type": "string",
          "example": "IT Budget"
        },
        "poDate": {
          "type": "string",
          "format": "dateTime"
        },
        "warrantyExpiresDate": {
          "type": "string",
          "format": "dateTime"
        },
        "leaseExpiresDate": {
          "type": "string",
          "format": "dateTime"
        },
        "lifeExpectancy": {
          "type": "integer",
          "example": 7
        },
        "purchasingContact": {
          "type": "string",
          "example": "Nick in IT"
        }
      }
    },
    "computerGroups": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Example Computer Group"
        }
      }
    },
    "Network": {
      "properties": {
        "cellularTechnology": {
          "type": "string",
          "example": "Unknown"
        },
        "isVoiceRoamingEnabled": {
          "type": "boolean",
          "example": false
        },
        "imei": {
          "type": "string",
          "example": "59 105109 176278 3"
        },
        "iccid": {
          "type": "string",
          "example": "1914 8200 0111 5274 8291"
        },
        "meid": {
          "type": "string",
          "example": "15302309236898"
        },
        "carrierSettingsVersion": {
          "type": "string",
          "example": "33.1"
        },
        "currentCarrierNetwork": {
          "type": "string",
          "example": "Verizon Wireless"
        },
        "currentMobileCountryCode": {
          "type": "string",
          "example": "311"
        },
        "currentMobileNetworkCode": {
          "type": "string",
          "example": "480"
        },
        "homeCarrierNetwork": {
          "type": "string",
          "example": "Verizon"
        },
        "homeMobileCountryCode": {
          "type": "string"
        },
        "homeMobileNetworkCode": {
          "type": "string",
          "example": "480"
        },
        "isDataRoamingEnabled": {
          "type": "boolean",
          "example": true
        },
        "isRoaming": {
          "type": "boolean",
          "example": false
        },
        "phoneNumber": {
          "type": "string",
          "example": "555-555-5555 ext 5"
        }
      }
    },
    "SsoKeystoreWithDetails": {
      "properties": {
        "keystore": {
          "$ref": "#/definitions/SsoKeystore"
        },
        "keystoreDetails": {
          "$ref": "#/definitions/SsoKeystoreDetails"
        }
      }
    },
    "patchPolicySummaryObj": {
      "properties": {
        "policyId": {
          "type": "integer",
          "example": 1
        },
        "policyName": {
          "type": "string",
          "example": "Mozille Firefox"
        },
        "isPolicyEnabled": {
          "type": "boolean",
          "example": true
        },
        "policyTargetVersion": {
          "type": "string",
          "example": "61.0.1"
        },
        "policyDeploymentMethod": {
          "type": "string",
          "example": "SELFSERVICE"
        },
        "softwareTitle": {
          "type": "string",
          "example": "Mozille Firefox"
        },
        "softwareTitleConfigurationId": {
          "type": "integer",
          "example": 3
        },
        "pending": {
          "type": "integer",
          "example": 0
        },
        "completed": {
          "type": "integer",
          "example": 3
        },
        "deferred": {
          "type": "integer",
          "example": 1
        },
        "failed": {
          "type": "integer",
          "example": 0
        }
      }
    },
    "classObj": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Mr. Farthington's Class"
        }
      }
    },
    "SsoSettings": {
      "required": [
        "entityID",
        "groupAttributeName",
        "groupRdnKey",
        "idpProviderType",
        "isEnabledBypass",
        "isEnabledEnrollment",
        "isEnabledJss",
        "isEnabledOsx",
        "isGroupEnrollmentAccessEnabled",
        "isTokenExpirationDisabled",
        "isUserAttributeEnabled",
        "metadataSource",
        "userMapping"
      ],
      "properties": {
        "isEnabledEnrollment": {
          "type": "boolean",
          "default": false
        },
        "isEnabledBypass": {
          "type": "boolean",
          "default": false
        },
        "isEnabledJss": {
          "type": "boolean",
          "default": false
        },
        "isEnabledOsx": {
          "type": "boolean",
          "default": false
        },
        "isTokenExpirationDisabled": {
          "type": "boolean",
          "default": false
        },
        "isUserAttributeEnabled": {
          "type": "boolean",
          "default": false
        },
        "userAttributeName": {
          "type": "string"
        },
        "userMapping": {
          "type": "string",
          "enum": [
            "USERNAME",
            "EMAIL"
          ]
        },
        "isGroupEnrollmentAccessEnabled": {
          "type": "boolean",
          "default": false
        },
        "groupAttributeName": {
          "type": "string",
          "default": "http://schemas.xmlsoap.org/claims/Group"
        },
        "groupRdnKey": {
          "type": "string"
        },
        "groupEnrollmentAccessName": {
          "type": "string"
        },
        "idpProviderType": {
          "type": "string",
          "enum": [
            "ADFS",
            "OKTA",
            "GOOGLE",
            "SHIBBOLETH",
            "ONELOGIN",
            "PING",
            "CENTRIFY",
            "OTHER"
          ]
        },
        "idpURL": {
          "type": "string",
          "example": "https://dev-940210.oktapreview.com/app/exk6bnecb9a4Z5spn0h7/sso/saml/metadata"
        },
        "entityID": {
          "type": "string"
        },
        "metadataFileName": {
          "type": "string",
          "example": "if MetadataSource is set to URL, remove this field"
        },
        "otherProviderTypeName": {
          "type": "string"
        },
        "federationMetadataFile": {
          "type": "string",
          "format": "byte",
          "example": "if MetadataSource is set to URL, remove this field"
        },
        "metadataSource": {
          "type": "string",
          "enum": [
            "URL",
            "FILE",
            "UNKNOWN"
          ]
        },
        "sessionTimeout": {
          "type": "integer",
          "format": "int32",
          "default": 480
        }
      }
    },
    "limitations": {
      "type": "object",
      "properties": {
        "networkSegments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              }
            }
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "userGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "BrandingSearchResults": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "example": 1
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandingConfiguration"
          }
        }
      }
    },
    "InventoryPreloadRecord": {
      "required": [
        "deviceType",
        "serialNumber"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "serialNumber": {
          "type": "string"
        },
        "deviceType": {
          "type": "string",
          "example": "COMPUTER, MOBILE DEVICE",
          "enum": [
            "Computer",
            "Mobile Device",
            "Unknown"
          ]
        },
        "username": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "building": {
          "type": "string"
        },
        "room": {
          "type": "string"
        },
        "poNumber": {
          "type": "string"
        },
        "poDate": {
          "type": "string"
        },
        "warrantyExpiration": {
          "type": "string"
        },
        "appleCareId": {
          "type": "string"
        },
        "lifeExpectancy": {
          "type": "string"
        },
        "purchasePrice": {
          "type": "string"
        },
        "purchasingContact": {
          "type": "string"
        },
        "purchasingAccount": {
          "type": "string"
        },
        "leaseExpiration": {
          "type": "string"
        },
        "barCode1": {
          "type": "string"
        },
        "barCode2": {
          "type": "string"
        },
        "assetTag": {
          "type": "string"
        },
        "vendor": {
          "type": "string"
        },
        "extensionAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryPreloadExtensionAttribute"
          }
        }
      }
    },
    "ActivePatchHistoryObj": {
      "properties": {
        "patchId": {
          "type": "integer"
        },
        "patchHistoryId": {
          "type": "integer"
        },
        "deviceId": {
          "type": "integer"
        },
        "deviceName": {
          "type": "string"
        },
        "buildingId": {
          "type": "integer"
        },
        "buildingName": {
          "type": "string"
        },
        "departmentId": {
          "type": "integer"
        },
        "departmentName": {
          "type": "string"
        },
        "siteId": {
          "type": "integer"
        },
        "siteName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "lastCheckIn": {
          "type": "string",
          "format": "dateTime"
        },
        "installedVersion": {
          "type": "string"
        }
      }
    },
    "UpdateIos": {
      "properties": {
        "purchasing": {
          "$ref": "#/definitions/Purchasing"
        }
      }
    },
    "SsoKeystoreDetails": {
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serialNumber": {
          "type": "integer"
        },
        "subject": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        }
      }
    },
    "PatchVersionObj": {
      "properties": {
        "absoluteOrderId": {
          "type": "integer"
        },
        "version": {
          "type": "string"
        },
        "onVersion": {
          "type": "integer"
        }
      }
    },
    "softwareTitlePatchPolicySummariesObj": {
      "properties": {
        "totalCount": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/patchPolicySummaryObj"
          }
        }
      }
    },
    "searchPatchPolicyLogParams": {
      "properties": {
        "pageNumber": {
          "type": "integer"
        },
        "pageSize": {
          "type": "integer"
        },
        "orderBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBy"
          }
        },
        "filter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        },
        "isLoadToEnd": {
          "type": "boolean"
        },
        "patchPolicyId": {
          "type": "integer"
        },
        "isLatest": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "userGroups": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Users with iOS 6"
        }
      }
    },
    "SearchResultsAccessGroups": {
      "properties": {
        "totalCount": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnrollmentAccessGroup"
          }
        }
      }
    },
    "mobileDeviceGroups": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Reporting Mobile Device Group"
        }
      }
    },
    "ActivePatchSummaryObj": {
      "properties": {
        "softwareTitleID": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "latestVersion": {
          "type": "string"
        },
        "releaseDate": {
          "type": "string",
          "format": "dateTime"
        },
        "upToDate": {
          "type": "integer"
        },
        "outOfDate": {
          "type": "integer"
        },
        "isOnDashboard": {
          "type": "boolean"
        },
        "softwareTitleConfigurationID": {
          "type": "integer"
        }
      }
    },
    "AndroidDetails": {
      "properties": {
        "osName": {
          "type": "string",
          "example": "Black Licorice"
        },
        "manufacturer": {
          "type": "string",
          "example": "Google"
        },
        "model": {
          "type": "string",
          "example": "Pixel 2"
        },
        "internalCapacityMb": {
          "type": "integer",
          "example": 30000
        },
        "internalAvailableMb": {
          "type": "integer",
          "example": 20000
        },
        "internalPercentUsed": {
          "type": "integer",
          "example": 67
        },
        "externalCapacityMb": {
          "type": "integer",
          "example": 20000
        },
        "externalAvailableMb": {
          "type": "integer",
          "example": 10000
        },
        "externalPercentUsed": {
          "type": "integer",
          "example": 50
        },
        "batteryLevel": {
          "type": "integer",
          "example": 100
        },
        "lastBackupTimestamp": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-15T16:39:56.307+0000"
        },
        "apiVersion": {
          "type": "integer",
          "example": 1
        },
        "computer": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Ginny's Computer"
            },
            "id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "security": {
          "$ref": "#/definitions/Security"
        }
      },
      "description": "will be populated if the type is android."
    },
    "ApiError": {
      "properties": {
        "httpStatus": {
          "type": "integer",
          "description": "HTTP status of the response"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "8675309",
                "description": "Error-specific code that can be used to identify localization string, etc."
              },
              "field": {
                "type": "string",
                "example": "Name",
                "description": "Name of the field that caused the error."
              },
              "description": {
                "type": "string",
                "example": "I've just picked up a fault in the AE35 unit. It's going to go 100% failure in 72 hours",
                "description": "A general description of error for troubleshooting/debugging. Generally this text should not be displayed to a user; instead refer to errorCode and it's localized text"
              },
              "id": {
                "type": "integer",
                "example": 3,
                "description": "id of object with error. Optional."
              }
            }
          }
        }
      }
    },
    "MDMSigningCertificate": {
      "properties": {
        "filename": {
          "type": "string",
          "default": ""
        },
        "keystorePassword": {
          "type": "string",
          "default": ""
        },
        "identityKeystore": {
          "type": "string",
          "description": "The the certificate base 64 encoded. Will not be returned on a GET.",
          "default": ""
        },
        "md5Sum": {
          "type": "string",
          "description": "The md5 checksum of the certificate file. Intended to be used in verifification the cert being used to sign MDM profiles.",
          "default": ""
        }
      }
    },
    "SearchActivePatchHistoryResults": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivePatchHistoryObj"
          }
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "Building": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "The Empire State Building"
        },
        "streetAddress1": {
          "type": "string",
          "example": "Floor 42"
        },
        "streetAddress2": {
          "type": "string",
          "example": "20 W 34th St."
        },
        "city": {
          "type": "string",
          "example": "New York"
        },
        "stateProvince": {
          "type": "string",
          "example": "New York"
        },
        "zipPostalCode": {
          "type": "string",
          "example": "10001"
        },
        "country": {
          "type": "string",
          "example": "The United States of America"
        }
      }
    },
    "Site": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Eau Claire"
        }
      }
    },
    "IosDetails": {
      "properties": {
        "model": {
          "type": "string",
          "example": "iPad 5th Generation (Wi-Fi)"
        },
        "modelIdentifier": {
          "type": "string",
          "example": "ipad6,11"
        },
        "modelNumber": {
          "type": "string",
          "example": "MP2F2LL"
        },
        "isSupervised": {
          "type": "boolean",
          "example": true
        },
        "batteryLevel": {
          "type": "integer",
          "example": 100
        },
        "lastBackupTimestamp": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-15T16:39:56.307+0000"
        },
        "capacityMb": {
          "type": "integer",
          "example": 27503
        },
        "availableMb": {
          "type": "integer",
          "example": 26646
        },
        "percentageUsed": {
          "type": "integer",
          "example": 3
        },
        "isShared": {
          "type": "boolean",
          "example": false
        },
        "isDeviceLocatorServiceEnabled": {
          "type": "boolean",
          "example": false
        },
        "isDoNotDisturbEnabled": {
          "type": "boolean",
          "example": false
        },
        "isCloudBackupEnabled": {
          "type": "boolean",
          "example": false
        },
        "lastCloudBackupTimestamp": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-15T16:39:56.307+0000"
        },
        "isLocationServicesEnabled": {
          "type": "boolean",
          "example": false
        },
        "isITunesStoreAccountActive": {
          "type": "boolean",
          "example": false
        },
        "isBleCapable": {
          "type": "boolean",
          "example": false
        },
        "computer": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Bob's MacBook"
            },
            "id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "purchasing": {
          "$ref": "#/definitions/Purchasing"
        },
        "security": {
          "$ref": "#/definitions/Security"
        },
        "network": {
          "$ref": "#/definitions/Network"
        },
        "applications": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "identifier": {
                "type": "string",
                "example": "com.apple.airport.mobileairportutility"
              },
              "name": {
                "type": "string",
                "example": "AirPort Utility"
              },
              "version": {
                "type": "string",
                "example": "135.24"
              }
            }
          }
        },
        "certificates": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "commonName": {
                "type": "string",
                "example": "3B259E4B-FAD5-4860-B1DD-336ADA786EBA"
              },
              "isIdentity": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "ebooks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "author": {
                "type": "string",
                "example": "Homer J Simpson"
              },
              "title": {
                "type": "string",
                "example": "The Odyssey"
              },
              "version": {
                "type": "string",
                "example": "0.1"
              }
            }
          }
        },
        "configurationProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationProfile"
          }
        },
        "provisioningProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProvisioningProfile"
          }
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Bob's Attachment"
              },
              "id": {
                "type": "integer",
                "example": 1
              }
            }
          }
        }
      },
      "description": "will be populated if the type is ios."
    },
    "LdapGroup": {
      "properties": {
        "id": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "ldapServerId": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      },
      "description": "An LDAP group."
    },
    "Criteria": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Building"
        },
        "priority": {
          "type": "integer",
          "example": 0
        },
        "andOr": {
          "type": "string",
          "example": "and"
        },
        "searchType": {
          "type": "string",
          "example": "is not"
        },
        "value": {
          "type": "string",
          "example": "Building 1"
        },
        "isOpeningParen": {
          "type": "boolean",
          "example": false
        },
        "isClosingParen": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Notification": {
      "properties": {
        "type": {
          "type": "string",
          "example": "EXCEEDED_LICENSE_COUNT"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "params": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "SearchResultsCategories": {
      "properties": {
        "totalCount": {
          "type": "integer",
          "example": 3
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        }
      }
    },
    "EnrollmentProcessTextObject": {
      "properties": {
        "languageCode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "loginDescription": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "loginButton": {
          "type": "string"
        },
        "deviceClassDescription": {
          "type": "string"
        },
        "deviceClassPersonal": {
          "type": "string"
        },
        "deviceClassPersonalDescription": {
          "type": "string"
        },
        "deviceClassEnterprise": {
          "type": "string"
        },
        "deviceClassEnterpriseDescription": {
          "type": "string"
        },
        "deviceClassButton": {
          "type": "string"
        },
        "personalEula": {
          "type": "string"
        },
        "enterpriseEula": {
          "type": "string"
        },
        "eulaButton": {
          "type": "string"
        },
        "siteDescription": {
          "type": "string"
        },
        "certificateText": {
          "type": "string"
        },
        "certificateButton": {
          "type": "string"
        },
        "certificateProfileName": {
          "type": "string"
        },
        "certificateProfileDescription": {
          "type": "string"
        },
        "personalText": {
          "type": "string"
        },
        "personalButton": {
          "type": "string"
        },
        "personalProfileName": {
          "type": "string"
        },
        "personalProfileDescription": {
          "type": "string"
        },
        "enterpriseText": {
          "type": "string"
        },
        "enterpriseButton": {
          "type": "string"
        },
        "enterpriseProfileName": {
          "type": "string"
        },
        "enterpriseProfileDescription": {
          "type": "string"
        },
        "enterprisePending": {
          "type": "string"
        },
        "quickAddText": {
          "type": "string"
        },
        "quickAddButton": {
          "type": "string"
        },
        "quickAddName": {
          "type": "string"
        },
        "quickAddPending": {
          "type": "string"
        },
        "completeMessage": {
          "type": "string"
        },
        "failedMessage": {
          "type": "string"
        },
        "tryAgainButton": {
          "type": "string"
        },
        "checkNowButton": {
          "type": "string"
        },
        "checkEnrollmentMessage": {
          "type": "string"
        },
        "logoutButton": {
          "type": "string"
        }
      }
    },
    "Authorization": {
      "properties": {
        "account": {
          "$ref": "#/definitions/AuthAccount"
        },
        "accountGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountGroup"
          }
        },
        "sites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Site"
          }
        },
        "authenticationType": {
          "type": "string",
          "example": "JSS",
          "enum": [
            "JSS",
            "LDAP",
            "SAML",
            "INVITE"
          ]
        }
      }
    },
    "softwareTitleConfigurationObj": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "InventoryPreloadCsvError": {
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "line": {
          "type": "integer"
        },
        "fieldSize": {
          "type": "integer"
        },
        "deviceType": {
          "type": "string"
        }
      }
    },
    "SsoKeystore": {
      "required": [
        "defaultKey",
        "key",
        "keystoreFile",
        "keystoreFileName",
        "keystoreSetupType",
        "pass",
        "storePass",
        "type"
      ],
      "properties": {
        "storePass": {
          "type": "string"
        },
        "defaultKey": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "pass": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "PKCS12",
            "JKS",
            "NONE"
          ]
        },
        "keystoreSetupType": {
          "type": "string",
          "enum": [
            "NONE",
            "UPLOADED",
            "GENERATED"
          ]
        },
        "keystoreFile": {
          "type": "string",
          "format": "byte"
        },
        "keystoreFileName": {
          "type": "string"
        }
      }
    },
    "ThirdPartyCertificateDetails": {
      "properties": {
        "subject": {
          "type": "string",
          "default": ""
        },
        "serialNumber": {
          "type": "string",
          "default": ""
        }
      }
    },
    "categorySummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Apps & Games"
        }
      }
    },
    "MobileDeviceDetails": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Jon's iPad"
        },
        "assetTag": {
          "type": "string",
          "example": "12345"
        },
        "lastInventoryUpdateTimestamp": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-15T16:39:56.307+0000"
        },
        "osVersion": {
          "type": "string",
          "example": "11.4"
        },
        "osBuild": {
          "type": "string",
          "example": "15F79"
        },
        "serialNumber": {
          "type": "string",
          "example": "DMQVGC0DHLF0"
        },
        "udid": {
          "type": "string",
          "example": "0dad565fb40b010a9e490440188063a378721069"
        },
        "ipAddress": {
          "type": "string",
          "example": "10.0.0.1"
        },
        "wifiMacAddress": {
          "type": "string",
          "example": "ee:00:7c:f0:e5:ff"
        },
        "bluetoothMacAddress": {
          "type": "string",
          "example": "ee:00:7c:f0:e5:aa"
        },
        "isManaged": {
          "type": "boolean",
          "example": true
        },
        "initialEntryTimestamp": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-15T16:39:56.307+0000"
        },
        "lastEnrollmentTimestamp": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-15T16:39:56.307+0000"
        },
        "deviceOwnershipLevel": {
          "type": "string",
          "example": "institutional"
        },
        "site": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Eau Claire"
            },
            "id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "extensionAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionAttribute"
          }
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "type": {
          "type": "string",
          "example": "ios",
          "description": "Based on the value of this either ios, appleTv, android objects will be populated.",
          "enum": [
            "ios",
            "appleTv",
            "android",
            "unknown"
          ]
        },
        "ios": {
          "$ref": "#/definitions/IosDetails"
        },
        "appleTv": {
          "$ref": "#/definitions/AppleTvDetails"
        },
        "android": {
          "$ref": "#/definitions/AndroidDetails"
        }
      }
    },
    "PolicyProperties": {
      "properties": {
        "isPoliciesRequireNetworkStateChange": {
          "type": "boolean",
          "default": false
        },
        "isAllowNetworkStateChangeTriggers": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "PatchPolicyAttemptAction": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "actionOrder": {
          "type": "integer"
        },
        "action": {
          "type": "string"
        }
      }
    },
    "cacheSettings": {
      "required": [
        "cacheType",
        "cacheUniqueId",
        "memcachedEndpoints",
        "timeToLiveSeconds"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "name": {
          "type": "string",
          "default": "cache configuration"
        },
        "cacheType": {
          "type": "string",
          "example": "ehcache"
        },
        "timeToLiveSeconds": {
          "type": "integer",
          "format": "int32",
          "example": 120
        },
        "timeToIdleSeconds": {
          "type": "integer",
          "format": "int32",
          "example": 120
        },
        "ehcacheMaxBytesLocalHeap": {
          "type": "string"
        },
        "cacheUniqueId": {
          "type": "string",
          "example": "24864549-94ea-4cc1-bb80-d7fb392c6556",
          "description": "The default is for Jamf Pro to generate a UUID, so we can only give an example instead."
        },
        "isElasticache": {
          "type": "boolean"
        },
        "memcachedEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/memcachedEndpoints"
          }
        }
      }
    },
    "UpdateMobileDevice": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Jan's Mobile Device"
        },
        "assetTag": {
          "type": "string",
          "example": "8675309"
        },
        "siteId": {
          "type": "integer",
          "example": 1
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "updatedExtensionAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionAttribute"
          }
        },
        "ios": {
          "$ref": "#/definitions/UpdateIos"
        },
        "appleTv": {
          "$ref": "#/definitions/UpdateAppleTv"
        }
      }
    },
    "departments": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "IT"
        }
      }
    },
    "ConfigurationProfile": {
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Test WiFi"
        },
        "version": {
          "type": "string",
          "example": "1"
        },
        "uuid": {
          "type": "string",
          "example": "D29DD9FB-0D5B-422F-A3A2-ABBC5848E949"
        },
        "identifier": {
          "type": "string",
          "example": "ac2-server4.D0EFAC2D-326C-4BB6-87E6-2BCB88490AAA"
        }
      }
    },
    "computers": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Bob's MacBook Pro"
        }
      }
    },
    "VPPAdminAccount": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "VPP Admin Account"
        },
        "licenseCount": {
          "type": "integer",
          "example": 42
        },
        "usedLicenseCount": {
          "type": "integer",
          "example": 40
        },
        "location": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "site": {
          "$ref": "#/definitions/Site"
        }
      }
    },
    "SearchResultsProcessTexts": {
      "properties": {
        "totalCount": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnrollmentProcessTextObject"
          }
        }
      }
    },
    "OrderBy": {
      "properties": {
        "field": {
          "type": "string",
          "example": "Name"
        },
        "direction": {
          "type": "string",
          "example": "DESC",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "AppleTvDetails": {
      "properties": {
        "model": {
          "type": "string",
          "example": "Apple TV 3rd Generation Rev 2"
        },
        "modelIdentifier": {
          "type": "string",
          "example": "AppleTV3,2"
        },
        "modelNumber": {
          "type": "string",
          "example": "MD199LL"
        },
        "isSupervised": {
          "type": "boolean",
          "example": true
        },
        "airplayPassword": {
          "type": "string",
          "example": "1234"
        },
        "deviceId": {
          "type": "string",
          "example": "1"
        },
        "locales": {
          "type": "string"
        },
        "purchasing": {
          "$ref": "#/definitions/Purchasing"
        },
        "configurationProfiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationProfile"
          }
        }
      },
      "description": "will be populated if the type is appleTv."
    },
    "LdapGroupSearchResults": {
      "properties": {
        "totalCount": {
          "type": "integer"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LdapGroup"
          }
        }
      }
    },
    "EnrollmentSettings": {
      "properties": {
        "isInstallSingleProfile": {
          "type": "boolean",
          "default": false
        },
        "isSigningMdmProfileEnabled": {
          "type": "boolean",
          "default": false
        },
        "mdmSigningCertificate": {
          "$ref": "#/definitions/MDMSigningCertificate"
        },
        "isRestrictReenrollment": {
          "type": "boolean",
          "default": false
        },
        "isFlushLocationInformation": {
          "type": "boolean",
          "default": false
        },
        "isFlushLocationHistoryInformation": {
          "type": "boolean",
          "default": false
        },
        "isFlushPolicyHistory": {
          "type": "boolean",
          "default": false
        },
        "isFlushExtensionAttributes": {
          "type": "boolean",
          "default": false
        },
        "flushMdmCommandsOnReenroll": {
          "type": "string",
          "enum": [
            "DELETE_NOTHING",
            "DELETE_ERRORS",
            "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED",
            "DELETE_EVERYTHING"
          ],
          "default": "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED"
        },
        "isEnabledMacosEnterpriseEnrollment": {
          "type": "boolean",
          "default": false
        },
        "managementUsername": {
          "type": "string",
          "example": "radmin",
          "default": ""
        },
        "managementPassword": {
          "type": "string"
        },
        "passwordType": {
          "type": "string",
          "enum": [
            "STATIC",
            "RANDOM"
          ],
          "default": "STATIC"
        },
        "randomPasswordLength": {
          "type": "integer",
          "format": "int32",
          "default": 8
        },
        "isCreateManagementAccount": {
          "type": "boolean",
          "default": true
        },
        "isHideManagementAccount": {
          "type": "boolean",
          "default": false
        },
        "isAllowSshOnlyManagementAccount": {
          "type": "boolean",
          "default": false
        },
        "isEnsureSshRunning": {
          "type": "boolean",
          "default": true
        },
        "isLaunchSelfService": {
          "type": "boolean",
          "default": false
        },
        "isSignQuickAdd": {
          "type": "boolean",
          "default": false
        },
        "developerCertificateIdentity": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string"
            },
            "keystorePassword": {
              "type": "string",
              "default": ""
            },
            "identityKeystore": {
              "type": "string",
              "description": "The base 64 encoded certificate. Will not be returned on a GET."
            },
            "md5Sum": {
              "type": "string",
              "description": "The md5 checksum of the certificate file. Intended to be used in verifification the cert being used to sign QuickAdd packages.",
              "default": ""
            }
          }
        },
        "thirdPartyCertificateDetails": {
          "$ref": "#/definitions/ThirdPartyCertificateDetails"
        },
        "isEnableIosEnterpriseEnrollment": {
          "type": "boolean",
          "default": true
        },
        "isEnableIosPersonalEnrollment": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "AuthAccount": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "username": {
          "type": "string",
          "example": "admin"
        },
        "realName": {
          "type": "string",
          "example": "IT Bob"
        },
        "email": {
          "type": "string",
          "example": "ITBob@Jamf.com"
        },
        "preferences": {
          "$ref": "#/definitions/AccountPreferences"
        },
        "isMultiSiteAdmin": {
          "type": "boolean",
          "example": true
        },
        "accessLevel": {
          "type": "string",
          "example": "FullAccess",
          "title": "accessLevel",
          "enum": [
            "FullAccess",
            "SiteAccess",
            "GroupBasedAccess"
          ]
        },
        "privilegeSet": {
          "type": "string",
          "example": "CUSTOM",
          "title": "privilegeSet",
          "enum": [
            "ADMINISTRATOR",
            "AUDITOR",
            "ENROLLMENT",
            "CUSTOM"
          ]
        },
        "privilegesBySite": {
          "type": "object",
          "title": "privilegesBySite",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "currentSiteId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "MobileDeviceSearchResults": {
      "properties": {
        "totalCount": {
          "type": "integer",
          "example": 3
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MobileDevice"
          }
        }
      }
    },
    "SearchResultsScripts": {
      "properties": {
        "totalCount": {
          "type": "integer",
          "example": 3
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          }
        }
      }
    },
    "ebook": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "The Neverending API"
        },
        "kind": {
          "type": "string",
          "example": "IBOOKS",
          "enum": [
            "UNKNOWN",
            "PDF",
            "EPUB",
            "IBOOKS"
          ]
        },
        "url": {
          "type": "string",
          "example": "https://jamf.com/ibooks/the_neverending_api.just_kidding"
        },
        "isFree": {
          "type": "boolean",
          "example": true
        },
        "version": {
          "type": "string",
          "example": "10.9.0"
        },
        "author": {
          "type": "string",
          "example": "IT Bob"
        },
        "isDeployAsManaged": {
          "type": "boolean",
          "example": false,
          "description": "If true, it will be automatically installed"
        },
        "isInstallAutomatically": {
          "type": "boolean",
          "example": false
        },
        "category": {
          "$ref": "#/definitions/categorySummary"
        },
        "site": {
          "$ref": "#/definitions/Site"
        }
      }
    },
    "ProvisioningProfile": {
      "properties": {
        "displayName": {
          "type": "string",
          "example": "jamfnation"
        },
        "uuid": {
          "type": "string",
          "example": "89AF33FC-123C-1231-AEFD-9C3ED123AFCC"
        },
        "expirationDate": {
          "type": "string",
          "format": "dateTime",
          "example": "2018-10-24T21:57:37.000+0000"
        }
      }
    },
    "searchPatchPolicyLogResults": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/patchPolicyLogObj"
          }
        },
        "totalCount": {
          "type": "integer"
        }
      }
    },
    "SystemInformation": {
      "properties": {
        "isVppTokenEnabled": {
          "type": "boolean",
          "example": false
        },
        "isDepAccountEnabled": {
          "type": "boolean",
          "example": false
        },
        "isByodEnabled": {
          "type": "boolean",
          "example": false
        },
        "isUserMigrationEnabled": {
          "type": "boolean",
          "example": false
        },
        "isCloudDeploymentsEnabled": {
          "type": "boolean",
          "example": false
        },
        "isPatchEnabled": {
          "type": "boolean",
          "example": false
        },
        "isSsoSamlEnabled": {
          "type": "boolean",
          "example": false
        },
        "ssoSamlLoginUri": {
          "type": "string",
          "example": "/sso"
        }
      }
    },
    "memcachedEndpoints": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Jamf Fake Example Memcache"
        },
        "hostName": {
          "type": "string",
          "example": "https://memcache.jamf.com"
        },
        "port": {
          "type": "integer",
          "example": 9001
        },
        "isEnabled": {
          "type": "boolean",
          "example": true
        },
        "jssCacheConfigurationId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "retryPatchPolicyParams": {
      "properties": {
        "patchPolicyId": {
          "type": "integer"
        },
        "deviceIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "isRetryAllFailed": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Engage": {
      "properties": {
        "isEnabled": {
          "type": "boolean"
        }
      }
    },
    "RecalculationResults": {
      "properties": {
        "count": {
          "type": "integer",
          "example": 3
        }
      }
    },
    "UpdateAppleTv": {
      "properties": {
        "airplayPassword": {
          "type": "string",
          "example": "12345"
        },
        "purchasing": {
          "$ref": "#/definitions/Purchasing"
        }
      }
    },
    "PatchPolicyAttempt": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "attemptNo": {
          "type": "integer"
        },
        "deviceId": {
          "type": "integer"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PatchPolicyAttemptAction"
          }
        }
      }
    },
    "StartupStatus": {
      "properties": {
        "step": {
          "type": "string",
          "example": "Initializing"
        },
        "stepCode": {
          "type": "string",
          "example": "SERVER_INIT_START",
          "enum": [
            "SERVER_INIT_START",
            "SERVER_INIT_ANALYZING_WEBAPP",
            "SERVER_INIT_POPULATING_NAVIGATION",
            "SERVER_INIT_POPULATING_OBJECTS",
            "SERVER_INIT_INITIALIZING_OBJ",
            "SERVER_INIT_VERIFYING_CACHE",
            "SERVER_INIT_INITIALIZING_CHANGE_MANAGEMENT",
            "SERVER_INIT_INITIALIZING_COMMUNICATION_SYSTEM",
            "SERVER_INIT_INITIALIZING_MDM_QUEUE_MONITOR",
            "SERVER_INIT_CALCULATING_SMART_GROUPS",
            "SERVER_INIT_DB_SCHEMA_COMPARE",
            "SERVER_INIT_DB_TABLE_CHECK_FOR_RENAME",
            "SERVER_INIT_DB_TABLE_ALTER",
            "SERVER_INIT_DB_TABLE_ANALYZING",
            "SERVER_INIT_DB_TABLE_CREATE",
            "SERVER_INIT_DB_TABLE_DROP",
            "SERVER_INIT_DB_TABLE_RENAME",
            "SERVER_INIT_DB_COLUMN_RENAME",
            "SERVER_INIT_DB_COLUMN_ENCODING_CHANGE_STEP_1",
            "SERVER_INIT_DB_COLUMN_ENCODING_CHANGE_STEP_2",
            "SERVER_INIT_DB_COLUMN_ENCODING_CHANGE_STEP_3",
            "SERVER_INIT_DB_UPGRADE_CHECK",
            "SERVER_INIT_DB_UPGRADE_COMPLETE",
            "SERVER_INIT_SS_GENERATE_NOTIFICATIONS",
            "SERVER_INIT_SS_GENERATE_NOTIFICATIONS_STATUS",
            "SERVER_INIT_SS_GENERATE_NOTIFICATIONS_FINALIZE",
            "SERVER_INIT_PKI_MIGRATION_DONE",
            "SERVER_INIT_PKI_MIGRATION_STATUS",
            "SERVER_INIT_MEMCACHED_ENDPOINTS_CHECK",
            "SERVER_INIT_CACHE_FLUSHING",
            "SERVER_INIT_COMPLETE"
          ]
        },
        "stepParam": {
          "type": "string",
          "example": "buildings"
        },
        "percentage": {
          "type": "integer",
          "example": 50
        },
        "warning": {
          "type": "string",
          "example": "Converting buildings, do not restart your JSS"
        },
        "warningCode": {
          "type": "string",
          "example": "SERVER_INIT_WARNING_DB_TABLE_ENCODING",
          "enum": [
            "SERVER_INIT_WARNING_DB_TABLE_ENCODING"
          ]
        },
        "warningParam": {
          "type": "string",
          "example": "13 MB"
        },
        "error": {
          "type": "string",
          "example": "Jamf Pro Startup Suspended"
        },
        "errorCode": {
          "type": "string",
          "example": "SERVER_INIT_ERROR_INITIALIZATION_FAILED",
          "enum": [
            "CACHE_CONFIGURATION_ERROR",
            "CHILD_NODE_STARTUP_ERROR",
            "MORE_THAN_ONE_CLUSTER_SETTINGS_ERROR",
            "MASTER_NODE_NOT_SET_ERROR",
            "DATABASE_ERROR",
            "EHCACHE_ERROR",
            "FLAG_INITIALIZATION_FAILED",
            "MEMCACHED_ERROR"
          ]
        }
      }
    },
    "LegacyEnrollment": {
      "required": [
        "accessGroups",
        "passwordType"
      ],
      "properties": {
        "managementUsername": {
          "type": "string",
          "default": ""
        },
        "managementPassword": {
          "type": "string",
          "default": ""
        },
        "passwordType": {
          "type": "string",
          "example": "STATIC",
          "enum": [
            "STATIC",
            "RANDOM"
          ]
        },
        "randomPasswordLength": {
          "type": "integer"
        },
        "isEnableSSH": {
          "type": "boolean",
          "default": false
        },
        "isEnsureSSHRunning": {
          "type": "boolean",
          "default": false
        },
        "isCreateManagementAccount": {
          "type": "boolean",
          "default": false
        },
        "isHideManagementAccount": {
          "type": "boolean",
          "default": false
        },
        "isSingleProfile": {
          "type": "boolean",
          "default": false
        },
        "isRestrictRenrollment": {
          "type": "boolean",
          "default": false
        },
        "isOsxEnableEnterpriseEnrollment": {
          "type": "boolean",
          "default": false
        },
        "isLaunchSelfService": {
          "type": "boolean",
          "default": false
        },
        "isSigningEnabled": {
          "type": "boolean",
          "default": false
        },
        "isFlushPolicyHistoryEnabled": {
          "type": "boolean",
          "default": false
        },
        "isFlushLocationInformationEnabled": {
          "type": "boolean",
          "default": false
        },
        "flushMDMCommandsOnReEnroll": {
          "type": "string",
          "enum": [
            "DELETE_NOTHING",
            "DELETE_ERRORS",
            "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED",
            "DELETE_EVERYTHING"
          ],
          "default": "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED"
        },
        "isIosEnableEnterpriseEnrollment": {
          "type": "boolean",
          "default": false
        },
        "isIosEnableBYOEnrollment": {
          "type": "boolean",
          "default": false
        },
        "isAndroidEnableBYOEnrollment": {
          "type": "boolean",
          "default": false
        },
        "enrollmentProcessTextByLanguageCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegacyEnrollmentProcessText"
          }
        },
        "accessGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegacyEnrollmentAccessGroup"
          }
        },
        "developerCertificateIdentityID": {
          "type": "integer",
          "format": "int32",
          "default": -1
        },
        "developerCertificateIdentity": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string"
            },
            "keystorePassword": {
              "type": "string"
            },
            "identityKeystore": {
              "type": "array",
              "description": "The the certificate base 64 encoded. Will not be returned on a GET.",
              "items": {
                "type": "string",
                "format": "byte"
              }
            },
            "md5Sum": {
              "type": "string",
              "description": "The md5 checksum of the certificate file. Intended to be used in verification the cert being used to sign QuickAdd packages."
            },
            "id": {
              "type": "integer"
            }
          }
        },
        "isSigningMdmProfileEnabled": {
          "type": "boolean",
          "default": false
        },
        "mdmSigningCertificate": {
          "$ref": "#/definitions/MDMSigningCertificate"
        },
        "thirdPartyCertificateDetails": {
          "$ref": "#/definitions/ThirdPartyCertificateDetails"
        }
      }
    },
    "MobileDeviceSearchParams": {
      "properties": {
        "pageNumber": {
          "type": "integer",
          "example": 1
        },
        "pageSize": {
          "type": "integer",
          "example": 100
        },
        "isLoadToEnd": {
          "type": "boolean",
          "example": false
        },
        "orderBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBy"
          }
        },
        "udid": {
          "type": "string",
          "example": "2b6f0cc904d137be2e1730235f5664094b831186"
        },
        "macAddress": {
          "type": "string",
          "example": "ee:00:7c:f0:e5:aa"
        },
        "name": {
          "type": "string",
          "example": "Jan's MObile Device"
        },
        "serialNumber": {
          "type": "string"
        },
        "osType": {
          "type": "string"
        },
        "isManaged": {
          "type": "boolean"
        },
        "excludedIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "LanguageCode": {
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CurrentAuthorization": {
      "properties": {
        "account": {
          "$ref": "#/definitions/CurrentAccount"
        },
        "sites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Site"
          }
        },
        "authenticationType": {
          "type": "string",
          "example": "JSS",
          "enum": [
            "JSS",
            "LDAP",
            "SAML",
            "INVITE"
          ]
        }
      }
    },
    "Reenrollment": {
      "required": [
        "flushMDMQueue"
      ],
      "properties": {
        "isFlushPolicyHistoryEnabled": {
          "type": "boolean",
          "default": false
        },
        "isFlushLocationInformationEnabled": {
          "type": "boolean",
          "default": false
        },
        "isFlushLocationInformationHistoryEnabled": {
          "type": "boolean",
          "default": false
        },
        "isFlushExtensionAttributesEnabled": {
          "type": "boolean",
          "default": false
        },
        "flushMDMQueue": {
          "type": "string",
          "example": "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED",
          "enum": [
            "DELETE_NOTHING",
            "DELETE_ERRORS",
            "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED",
            "DELETE_EVERYTHING"
          ]
        }
      }
    },
    "SelfServiceInstallSettings": {
      "type": "object",
      "required": [
        "installLocation"
      ],
      "properties": {
        "isInstallAutomatically": {
          "type": "boolean",
          "description": "true if Self Service is insalled automatically, false if not\n",
          "default": true
        },
        "installLocation": {
          "type": "string",
          "example": "/Applications",
          "description": "path at which Self Service is installed\n"
        }
      },
      "description": "object representation of Self Service settings regarding installation\n"
    },
    "JamfProServerUrl": {
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "unsecuredEnrollmentUrl": {
          "type": "string"
        }
      }
    },
    "Script": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Install Developer Utils Script"
        },
        "info": {
          "type": "string",
          "example": "Installs utilities for developers"
        },
        "notes": {
          "type": "string",
          "example": "Should be able to be re-run without problem."
        },
        "priority": {
          "type": "string",
          "example": "AFTER",
          "enum": [
            "BEFORE",
            "AFTER",
            "AT_REBOOT"
          ]
        },
        "categoryId": {
          "type": "integer",
          "example": 1
        },
        "categoryName": {
          "type": "string",
          "example": "Developer Tools"
        },
        "parameter4": {
          "type": "string",
          "example": "1"
        },
        "parameter5": {
          "type": "string",
          "example": "2"
        },
        "parameter6": {
          "type": "string",
          "example": "3"
        },
        "parameter7": {
          "type": "string",
          "example": "4"
        },
        "parameter8": {
          "type": "string",
          "example": "5"
        },
        "parameter9": {
          "type": "string",
          "example": "6"
        },
        "parameter10": {
          "type": "string",
          "example": "7"
        },
        "parameter11": {
          "type": "string",
          "example": "8"
        },
        "osRequirements": {
          "type": "string",
          "example": "10.10.x"
        },
        "scriptContents": {
          "type": "string",
          "example": "echo \"Trivial script.\""
        }
      }
    },
    "SearchActivePatchHistoryParams": {
      "properties": {
        "pageNumber": {
          "type": "integer"
        },
        "pageSize": {
          "type": "integer"
        },
        "isLoadToEnd": {
          "type": "boolean"
        },
        "softwareTitleID": {
          "type": "integer"
        },
        "softwareTitleConfigurationID": {
          "type": "integer"
        },
        "orderBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBy"
          }
        },
        "filter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        }
      }
    },
    "SearchParams": {
      "properties": {
        "pageNumber": {
          "type": "integer",
          "example": 1
        },
        "pageSize": {
          "type": "integer",
          "example": 100
        },
        "isLoadToEnd": {
          "type": "boolean",
          "example": false
        },
        "orderBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderBy"
          }
        }
      }
    },
    "LegacyEnrollmentProcessText": {
      "properties": {
        "languageCode": {
          "type": "string",
          "default": ""
        },
        "name": {
          "type": "string",
          "default": ""
        },
        "title": {
          "type": "string",
          "default": ""
        },
        "loginDescription": {
          "type": "string",
          "default": ""
        },
        "username": {
          "type": "string",
          "default": ""
        },
        "password": {
          "type": "string",
          "default": ""
        },
        "loginButton": {
          "type": "string",
          "default": ""
        },
        "deviceClassDescription": {
          "type": "string",
          "default": ""
        },
        "deviceClassBYO": {
          "type": "string",
          "default": ""
        },
        "deviceClassBYODescription": {
          "type": "string",
          "default": ""
        },
        "deviceClassEnterprise": {
          "type": "string",
          "default": ""
        },
        "deviceClassEnterpriseDescription": {
          "type": "string",
          "default": ""
        },
        "deviceClassButton": {
          "type": "string",
          "default": ""
        },
        "byoEULA": {
          "type": "string",
          "default": ""
        },
        "enterpriseEULA": {
          "type": "string",
          "default": ""
        },
        "eulaButton": {
          "type": "string",
          "default": ""
        },
        "siteDescription": {
          "type": "string",
          "default": ""
        },
        "certificateText": {
          "type": "string",
          "default": ""
        },
        "certificateButton": {
          "type": "string",
          "default": ""
        },
        "certificateProfileName": {
          "type": "string",
          "default": ""
        },
        "certificateProfileDescription": {
          "type": "string",
          "default": ""
        },
        "byoText": {
          "type": "string",
          "default": ""
        },
        "byoButton": {
          "type": "string",
          "default": ""
        },
        "byoProfileName": {
          "type": "string",
          "default": ""
        },
        "byoProfileDescription": {
          "type": "string",
          "default": ""
        },
        "enterpriseText": {
          "type": "string",
          "default": ""
        },
        "enterpriseButton": {
          "type": "string",
          "default": ""
        },
        "enterpriseProfileName": {
          "type": "string",
          "default": ""
        },
        "enterpriseProfileDescription": {
          "type": "string",
          "default": ""
        },
        "enterprisePending": {
          "type": "string",
          "default": ""
        },
        "quickAddText": {
          "type": "string",
          "default": ""
        },
        "quickAddButton": {
          "type": "string",
          "default": ""
        },
        "quickAddName": {
          "type": "string",
          "default": "QuickAdd.pkg"
        },
        "quickAddPending": {
          "type": "string",
          "default": ""
        },
        "completeMessage": {
          "type": "string",
          "default": ""
        },
        "failedMessage": {
          "type": "string",
          "default": ""
        },
        "tryAgainButton": {
          "type": "string",
          "default": ""
        },
        "checkNowButton": {
          "type": "string",
          "default": ""
        },
        "checkEnrollmentMessage": {
          "type": "string",
          "default": ""
        },
        "logoutButton": {
          "type": "string",
          "default": ""
        },
        "androidAppDescription": {
          "type": "string",
          "default": ""
        },
        "androidAppInstallButton": {
          "type": "string",
          "default": ""
        },
        "androidAppAlreadyInstalledButton": {
          "type": "string",
          "default": ""
        }
      }
    },
    "users": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "ExtensionAttribute": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Example EA"
        },
        "type": {
          "type": "string",
          "example": "STRING",
          "enum": [
            "STRING",
            "INTEGER",
            "DATE"
          ]
        },
        "value": {
          "type": "string",
          "example": "EA Value"
        }
      }
    },
    "BuildingSearchResults": {
      "properties": {
        "totalCount": {
          "type": "integer",
          "example": 3
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Building"
          }
        }
      }
    },
    "buildings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "The Empite State Building"
        }
      }
    },
    "mobileDevices": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Jan's iPad Pro"
        }
      }
    },
    "AdvancedSearch": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "Andy's Search"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Criteria"
          }
        },
        "displayFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "site": {
          "$ref": "#/definitions/Site"
        }
      }
    },
    "InventoryPreloadInvalidCsvResponse": {
      "properties": {
        "httpsStatus": {
          "type": "integer"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryPreloadCsvError"
          }
        }
      }
    },
    "CurrentAccount": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "username": {
          "type": "string",
          "example": "admin"
        },
        "realName": {
          "type": "string",
          "example": "IT Bob"
        },
        "email": {
          "type": "string",
          "example": "ITBob@Jamf.com"
        },
        "preferences": {
          "$ref": "#/definitions/AccountPreferences"
        },
        "isMultiSiteAdmin": {
          "type": "boolean",
          "example": true
        },
        "accessLevel": {
          "type": "string",
          "example": "FullAccess",
          "enum": [
            "FullAccess",
            "SiteAccess",
            "GroupBasedAccess"
          ]
        },
        "privilegeSet": {
          "type": "string",
          "example": "CUSTOM",
          "enum": [
            "ADMINISTRATOR",
            "AUDITOR",
            "ENROLLMENT",
            "CUSTOM"
          ]
        },
        "privileges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "currentSiteId": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "BrandingImageUrl": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "Category": {
      "required": [
        "name",
        "priority"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "The Best"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "example": 9
        }
      }
    },
    "patchPolicyLogObj": {
      "properties": {
        "patchPolicyId": {
          "type": "integer"
        },
        "deviceId": {
          "type": "integer"
        },
        "deviceName": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer"
        },
        "statusMessage": {
          "type": "string"
        },
        "statusDate": {
          "type": "string",
          "format": "datetime"
        },
        "attempt": {
          "type": "integer"
        }
      }
    },
    "MobileDevice": {
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "iPad"
        },
        "serialNumber": {
          "type": "string",
          "example": "DMQVGC0DHLA0"
        },
        "wifiMacAddress": {
          "type": "string",
          "example": "C4:84:66:92:78:00"
        },
        "udid": {
          "type": "string",
          "example": "0dad565fb40b010a9e490440188063a378721069"
        },
        "phoneNumber": {
          "type": "string",
          "example": "651-555-5555 Ext111"
        },
        "model": {
          "type": "string",
          "example": "iPad 5th Generation (Wi-Fi)"
        },
        "modelIdentifier": {
          "type": "string",
          "example": "iPad6,11"
        },
        "username": {
          "type": "string",
          "example": "admin"
        },
        "type": {
          "type": "string",
          "example": "ios",
          "enum": [
            "ios",
            "appleTv",
            "android",
            "unknown"
          ]
        }
      }
    },
    "Lobby": {
      "properties": {
        "version": {
          "type": "string",
          "example": "10.9.0"
        }
      }
    },
    "scope": {
      "type": "object",
      "properties": {
        "isAllComputers": {
          "type": "boolean",
          "example": false
        },
        "isAllMobileDevices": {
          "type": "boolean",
          "example": false
        },
        "isAllUsers": {
          "type": "boolean",
          "example": false
        },
        "computers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/computers"
          }
        },
        "computerGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/computerGroups"
          }
        },
        "mobileDevices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mobileDevices"
          }
        },
        "mobileDeviceGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mobileDeviceGroups"
          }
        },
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/buildings"
          }
        },
        "departments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/departments"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/users"
          }
        },
        "userGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userGroups"
          }
        },
        "classrooms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/classObj"
          }
        },
        "limitations": {
          "$ref": "#/definitions/limitations"
        },
        "exclusions": {
          "$ref": "#/definitions/exclusions"
        }
      }
    },
    "VppTokenSubscription": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Notes": {
      "properties": {
        "notes": {
          "type": "string"
        }
      }
    },
    "AccountPreferences": {
      "properties": {
        "language": {
          "type": "string",
          "example": "en"
        },
        "dateFormat": {
          "type": "string",
          "example": "MM/dd/yyyy"
        },
        "region": {
          "type": "string",
          "example": "Europe"
        },
        "timezone": {
          "type": "string",
          "example": "Etc/GMT"
        },
        "isDisableRelativeDates": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "BrandingConfiguration": {
      "required": [
        "operatingSystem"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "My Self Service"
        },
        "operatingSystem": {
          "type": "string",
          "example": "IOS",
          "enum": [
            "IOS",
            "MACOS"
          ]
        }
      },
      "example": {
        "id": 1,
        "name": "Test iOS Branding",
        "operatingSystem": "IOS",
        "brandingName": "My Self Service",
        "iconUrl": "http://jamfUrl/icon/1",
        "headerBackgroundColorCode": "0000FF",
        "menuIconColorCode": "0000FF",
        "brandingNameColorCode": "0000FF",
        "statusBarTextColor": "dark"
      }
    },
    "SearchResultsDepartments": {
      "properties": {
        "totalCount": {
          "type": "integer",
          "example": 3
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Department"
          }
        }
      }
    },
    "SelfServiceLoginSettings": {
      "type": "object",
      "required": [
        "authType",
        "userLoginLevel"
      ],
      "properties": {
        "userLoginLevel": {
          "type": "string",
          "example": "NotRequired",
          "description": "login setting to tell clients how to let users log in\n",
          "enum": [
            "NotRequired",
            "Anonymous",
            "Required"
          ]
        },
        "isAllowRememberMe": {
          "type": "boolean",
          "description": "true if remember me functionality is allowed, false if not\n",
          "default": true
        },
        "authType": {
          "type": "string",
          "example": "Basic",
          "description": "login type to be used when asking users to log in\n",
          "enum": [
            "Basic",
            "Saml"
          ]
        }
      },
      "description": "object representation of Self Service settings regarding login\n"
    },
    "SelfServiceSettings": {
      "type": "object",
      "properties": {
        "installSettings": {
          "$ref": "#/definitions/SelfServiceInstallSettings"
        },
        "loginSettings": {
          "$ref": "#/definitions/SelfServiceLoginSettings"
        },
        "configurationSettings": {
          "$ref": "#/definitions/SelfServiceInteractionSettings"
        }
      },
      "description": "object representation of Self Service settings\n"
    },
    "patchPolicyOnDashboard": {
      "properties": {
        "isOnDashboard": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "EnrollmentAccessGroup": {
      "properties": {
        "id": {
          "type": "string"
        },
        "ldapServerId": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "siteId": {
          "type": "integer"
        },
        "isEnableEnterpriseEnrollment": {
          "type": "boolean"
        },
        "isEnablePersonalEnrollment": {
          "type": "boolean"
        },
        "isRequireEula": {
          "type": "boolean"
        }
      }
    },
    "SelfServiceInteractionSettings": {
      "type": "object",
      "required": [
        "applicationName",
        "bookmarksName"
      ],
      "properties": {
        "isNotificationsEnabled": {
          "type": "boolean",
          "description": "global Self Service setting for if notifications are on or off\n",
          "default": false
        },
        "defaultHomeCategoryId": {
          "type": "integer",
          "format": "int32",
          "description": "id for the default home category in Self Service\n",
          "default": 0
        },
        "bookmarksName": {
          "type": "string",
          "example": "Bookmarks",
          "description": "renamed string for bookmarks if the admin wishes\n"
        },
        "applicationName": {
          "type": "string",
          "example": "Self Service",
          "description": "customized application display name\n"
        }
      },
      "description": "object representation of Self Service settings regarding user interaction\n"
    },
    "AccountGroup": {
      "properties": {
        "accessLevel": {
          "type": "string",
          "example": "FullAccess",
          "enum": [
            "FullAccess",
            "SiteAccess",
            "GroupBasedAccess"
          ]
        },
        "privilegeSet": {
          "type": "string",
          "example": "CUSTOM",
          "enum": [
            "ADMINISTRATOR",
            "AUDITOR",
            "ENROLLMENT",
            "CUSTOM"
          ]
        },
        "siteId": {
          "type": "integer",
          "example": 1
        },
        "privileges": {
          "type": "array",
          "title": "privileges",
          "items": {
            "type": "string"
          }
        },
        "memberUserIds": {
          "type": "array",
          "title": "memberUserIds",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "DeviceEnrollmentToken": {
      "properties": {
        "tokenFileName": {
          "type": "string",
          "example": "Acme MDM Token",
          "description": "Optional name of the token to be saved, if no name is provided one will be auto-generated"
        },
        "encodedToken": {
          "type": "array",
          "description": "The base 64 encoded token",
          "items": {
            "type": "string",
            "format": "byte",
            "example": "U29tZSByYW5kb20gYml0IG9mIHRleHQgdG8gdXNlIGFuZCBzZWUgaWYgYW55b25lIGFjdHVhbGx5IHRyaWVzIHRvIGRlY29kZSBpdA=="
          }
        }
      }
    },
    "Filter": {
      "properties": {
        "field": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "EQUALS",
            "NOT_EQUALS",
            "GREATER_THAN",
            "LESS_THAN",
            "GREATER_THAN_EQUAL",
            "LESS_THAN_EQUAL"
          ]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "LegacyEnrollmentAccessGroup": {
      "properties": {
        "uniqueID": {
          "type": "string",
          "example": "407e01dd-f19b-46ec-8849-b550a65d31d9",
          "description": "UUID for Access Group"
        },
        "type": {
          "type": "string",
          "enum": [
            "UNDEFINED",
            "ALL_JSS_USERS",
            "ALL_LDAP_USERS",
            "LDAP_GROUP"
          ],
          "default": "ALL_LDAP_USERS"
        },
        "name": {
          "type": "string",
          "default": "All LDAP Users"
        },
        "id": {
          "type": "string",
          "default": "-1"
        },
        "ldapServerID": {
          "type": "integer"
        },
        "isEnableEnterpriseEnrollment": {
          "type": "boolean",
          "default": true
        },
        "isEnableBYOEnrollment": {
          "type": "boolean",
          "default": false
        },
        "isRequireEULA": {
          "type": "boolean",
          "default": true
        },
        "site": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "default": ""
            },
            "id": {
              "type": "integer"
            }
          }
        },
        "siteID": {
          "type": "integer"
        }
      }
    },
    "AuthToken": {
      "properties": {
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzUxMiJ9.eyJhdXRoZW50aWNhdGVkLWFwcCI6IkdFTkVSSUMiLCJhdXRoZW50aWNhdGlvbi10eXBlIjoiSlNTIiwiZ3JvdXBzIjpbXSwic3ViamVjdC10eXBlIjoiSlNTX1VTRVJfSUQiLCJ0b2tlbi11dWlkIjoiNzc0YWY3MGYtYWQ0Yy00N2QzLTk2MzktZjEwMjBhMTIwYzExIiwibGRhcC1zZXJ2ZXItaWQiOi0xLCJzdWIiOiIxIiwiZXhwIjoxNTM5NjE5MzQ4fQ.0t7sgYyIyA7kTTmrM8tMGE7fnXcJ1ZzQODAJp0pzg92-cBMQS0Cv8S9oWjkJD7VJS-CHA1dOppr0G_2dCPOfng"
        },
        "expires": {
          "type": "integer",
          "example": 1539619348124
        }
      }
    },
    "Location": {
      "properties": {
        "username": {
          "type": "string",
          "example": "admin"
        },
        "realName": {
          "type": "string",
          "example": "IT Bob"
        },
        "emailAddress": {
          "type": "string",
          "example": "ITBob@jamf.com"
        },
        "position": {
          "type": "string",
          "example": "IT Team Lead"
        },
        "phoneNumber": {
          "type": "string",
          "example": "555-555-5555"
        },
        "department": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "IT"
            },
            "id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "building": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Eau Claire"
            },
            "id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "room": {
          "type": "string",
          "example": "4th Floor - Quad 3"
        }
      }
    },
    "Session": {
      "properties": {
        "currentSiteId": {
          "type": "integer",
          "example": 1
        }
      }
    }
  },
  "responses": {}
}
